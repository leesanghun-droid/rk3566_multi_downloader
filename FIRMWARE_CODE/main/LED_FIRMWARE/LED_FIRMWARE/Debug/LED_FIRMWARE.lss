
LED_FIRMWARE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008d7  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000136f  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076a  00000000  00000000  00001d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000956  00000000  00000000  000024a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00002dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000212  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000398  00000000  00000000  0000317e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003516  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000007b2  000007b2  000008c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.uart_init 00000020  00000726  00000726  0000083a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_transmit 0000000e  00000790  00000790  000008a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.button_init 00000008  0000079e  0000079e  000008b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.filtered_button 00000032  000006ac  000006ac  000007c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.button_read 000000fc  000002a0  000002a0  000003b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.HC595_send_byte 00000038  00000674  00000674  00000788  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.HC595_init 00000068  0000051c  0000051c  00000630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.HC595_latch 00000014  0000077c  0000077c  00000890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LED_SHOW 00000006  000007a6  000007a6  000008ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LED_SETTING 00000006  000007ac  000007ac  000008c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LED_BAR_SETUP 00000046  000005ea  000005ea  000006fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.CMD     000001c6  000000da  000000da  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.led_bar_init 00000020  00000746  00000746  0000085a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LED_SELECT 00000044  00000630  00000630  00000744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LED_BAR_RUN 000000a0  0000039c  0000039c  000004b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.BOOT_LED_LOGIC 00000072  0000043c  0000043c  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.BOOT_LED 00000026  000006de  000006de  000007f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.PROCESS_LED_LOGIC 00000066  00000584  00000584  00000698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.PROCESS_BAR_LED 0000006e  000004ae  000004ae  000005c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.main    00000022  00000704  00000704  00000818  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .data.PROCESS_DONE 00000001  00800132  000007c2  000008d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .bss.Process_level 00000001  00800133  00800133  000008d7  2**0
                  ALLOC
 36 .bss.process_bar_tims_second 00000002  0080011c  0080011c  000008d7  2**0
                  ALLOC
 37 .bss.process_bar_cycle_wait 00000002  0080011e  0080011e  000008d7  2**0
                  ALLOC
 38 .bss.BAR_LED_COLOR 00000002  00800120  00800120  000008d7  2**0
                  ALLOC
 39 .data.PROCESS_TIME 00000002  00800122  000007c0  000008d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 40 .bss.BOOT_DONE 00000001  00800134  00800134  000008d7  2**0
                  ALLOC
 41 .bss.boot_logic_cnt 00000002  00800124  00800124  000008d7  2**0
                  ALLOC
 42 .bss.boot_cycle_wait 00000002  00800126  00800126  000008d7  2**0
                  ALLOC
 43 .bss.BOOT_LED_COLOR 00000002  00800128  00800128  000008d7  2**0
                  ALLOC
 44 .bss.LED_BAR_ARRAY 00000018  00800100  00800100  000008d7  2**0
                  ALLOC
 45 .bss.LED_CHANGE 00000001  00800135  00800135  000008d7  2**0
                  ALLOC
 46 .bss.position_select 00000002  0080012a  0080012a  000008d7  2**0
                  ALLOC
 47 .bss.cycle_wait 00000002  0080012c  0080012c  000008d7  2**0
                  ALLOC
 48 .bss.button_status 00000001  00800136  00800136  000008d7  2**0
                  ALLOC
 49 .bss.button_cnt 00000001  00800137  00800137  000008d7  2**0
                  ALLOC
 50 .bss.button   00000001  00800138  00800138  000008d7  2**0
                  ALLOC
 51 .bss.reset_cnt 00000004  00800118  00800118  000008d7  2**0
                  ALLOC
 52 .bss.wait_time 00000002  0080012e  0080012e  000008d7  2**0
                  ALLOC
 53 .bss.mode     00000002  00800130  00800130  000008d7  2**0
                  ALLOC
 54 .text.__dummy_fini 00000002  000007ba  000007ba  000008ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__dummy_funcs_on_exit 00000002  000007bc  000007bc  000008d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__dummy_simulator_exit 00000002  000007be  000007be  000008d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.exit    00000016  00000766  00000766  0000087a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text._Exit   00000004  000007b6  000007b6  000008ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
   8:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
   c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  10:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  14:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  18:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  1c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  20:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  24:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  28:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  2c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  30:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  34:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  38:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  3c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  40:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  44:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  48:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  4c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  50:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  54:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  58:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  5c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  60:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>
  64:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 22       	and	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	22 01       	movw	r4, r4
  70:	24 00       	.word	0x0024	; ????
  72:	07 c0       	rjmp	.+14     	; 0x82 <.dinit+0x1a>
  74:	01 24       	eor	r0, r1
  76:	01 32       	cpi	r16, 0x21	; 33
  78:	80 01       	movw	r16, r0
  7a:	32 01       	movw	r6, r4
  7c:	33 00       	.word	0x0033	; ????
  7e:	07 c2       	rjmp	.+1038   	; 0x48e <BOOT_LED_LOGIC+0x52>
  80:	01 33       	cpi	r16, 0x31	; 49
  82:	01 39       	cpi	r16, 0x91	; 145
  84:	80 00       	.word	0x0080	; ????

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	e8 e6       	ldi	r30, 0x68	; 104
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	17 c0       	rjmp	.+46     	; 0xc8 <__do_clear_bss+0x8>
  9a:	b5 91       	lpm	r27, Z+
  9c:	a5 91       	lpm	r26, Z+
  9e:	35 91       	lpm	r19, Z+
  a0:	25 91       	lpm	r18, Z+
  a2:	05 91       	lpm	r16, Z+
  a4:	07 fd       	sbrc	r16, 7
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__do_clear_bss>
  a8:	95 91       	lpm	r25, Z+
  aa:	85 91       	lpm	r24, Z+
  ac:	ef 01       	movw	r28, r30
  ae:	f9 2f       	mov	r31, r25
  b0:	e8 2f       	mov	r30, r24
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0x20>
  bc:	fe 01       	movw	r30, r28
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__do_clear_bss+0x8>

000000c0 <__do_clear_bss>:
  c0:	1d 92       	st	X+, r1
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__do_clear_bss>
  c8:	e5 38       	cpi	r30, 0x85	; 133
  ca:	f4 07       	cpc	r31, r20
  cc:	31 f7       	brne	.-52     	; 0x9a <__do_copy_data+0x8>
  ce:	0e 94 82 03 	call	0x704	; 0x704 <main>
  d2:	0c 94 b3 03 	jmp	0x766	; 0x766 <exit>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

Disassembly of section .text:

000007b2 <__bad_interrupt>:
 7b2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.uart_init:

00000726 <uart_init>:

int mode    =   header1;

void uart_init()
{
		UCSR0A = 0;
 726:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
		UCSR0B = 0;
 72a:	e1 ec       	ldi	r30, 0xC1	; 193
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	10 82       	st	Z, r1
		UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 730:	86 e0       	ldi	r24, 0x06	; 6
 732:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		UBRR0H = 0;
 736:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		UBRR0L = 95; // 115200 = 7 , 230400 = 3
 73a:	8f e5       	ldi	r24, 0x5F	; 95
 73c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		UCSR0B = (1<<RXEN0) | (1<<TXEN0) ;
 740:	88 e1       	ldi	r24, 0x18	; 24
 742:	80 83       	st	Z, r24
 744:	08 95       	ret

Disassembly of section .text.UART_transmit:

00000790 <UART_transmit>:
}

void UART_transmit(uint8_t data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 790:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 794:	95 ff       	sbrs	r25, 5
 796:	fc cf       	rjmp	.-8      	; 0x790 <UART_transmit>
	UDR0 = data;
 798:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 79c:	08 95       	ret

Disassembly of section .text.button_init:

0000079e <button_init>:

#define USER_BUTTON_PIN 2

void button_init()
{
  DDRD &=  ~(1<<USER_BUTTON_PIN); // PB2 GPIO WRITE MODE
 79e:	8a b1       	in	r24, 0x0a	; 10
 7a0:	8b 7f       	andi	r24, 0xFB	; 251
 7a2:	8a b9       	out	0x0a, r24	; 10
 7a4:	08 95       	ret

Disassembly of section .text.filtered_button:

000006ac <filtered_button>:
uint8_t button=0;

char button_cnt=0;
void filtered_button()
{
  if((PIND & (1 << PIND2)) != (1 << PIND2))
 6ac:	4a 99       	sbic	0x09, 2	; 9
 6ae:	05 c0       	rjmp	.+10     	; 0x6ba <filtered_button+0xe>
    button_cnt++;
 6b0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <button_cnt>
 6b4:	8f 5f       	subi	r24, 0xFF	; 255
 6b6:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <button_cnt>
  if((PIND & (1 << PIND2)) == (1 << PIND2))
 6ba:	4a 9b       	sbis	0x09, 2	; 9
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <filtered_button+0x1c>
    button_cnt--;
 6be:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <button_cnt>
 6c2:	81 50       	subi	r24, 0x01	; 1
 6c4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <button_cnt>

  if(button_cnt>100)
 6c8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <button_cnt>
 6cc:	85 36       	cpi	r24, 0x65	; 101
 6ce:	30 f0       	brcs	.+12     	; 0x6dc <filtered_button+0x30>
  {
    button=1;
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <button>
    button_cnt=100;
 6d6:	84 e6       	ldi	r24, 0x64	; 100
 6d8:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <button_cnt>
 6dc:	08 95       	ret

Disassembly of section .text.button_read:

000002a0 <button_read>:
}

uint8_t button_status=0;
void button_read()
{
filtered_button();
 2a0:	0e 94 56 03 	call	0x6ac	; 0x6ac <filtered_button>

wait_time--;
 2a4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <wait_time>
 2a8:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <wait_time+0x1>
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <wait_time+0x1>
 2b2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <wait_time>
if(wait_time<0)
 2b6:	99 23       	and	r25, r25
 2b8:	24 f4       	brge	.+8      	; 0x2c2 <button_read+0x22>
wait_time=0;
 2ba:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <wait_time+0x1>
 2be:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <wait_time>

if(wait_time==0)
 2c2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <wait_time>
 2c6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <wait_time+0x1>
 2ca:	89 2b       	or	r24, r25
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <button_read+0x30>
 2ce:	65 c0       	rjmp	.+202    	; 0x39a <button_read+0xfa>
{
    if (button) 
 2d0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <button>
 2d4:	88 23       	and	r24, r24
 2d6:	f1 f1       	breq	.+124    	; 0x354 <button_read+0xb4>
    {
        button_status=button;
 2d8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <button_status>
        wait_time=30000;
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	95 e7       	ldi	r25, 0x75	; 117
 2e0:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <wait_time+0x1>
 2e4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <wait_time>
        reset_cnt++;
 2e8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <reset_cnt>
 2ec:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <reset_cnt+0x1>
 2f0:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <reset_cnt+0x2>
 2f4:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <reset_cnt+0x3>
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	a1 1d       	adc	r26, r1
 2fc:	b1 1d       	adc	r27, r1
 2fe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <reset_cnt>
 302:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <reset_cnt+0x1>
 306:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <reset_cnt+0x2>
 30a:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <reset_cnt+0x3>
        if(reset_cnt>30)
 30e:	4f 97       	sbiw	r24, 0x1f	; 31
 310:	a1 05       	cpc	r26, r1
 312:	b1 05       	cpc	r27, r1
 314:	0c f4       	brge	.+2      	; 0x318 <button_read+0x78>
 316:	41 c0       	rjmp	.+130    	; 0x39a <button_read+0xfa>
        {
			UART_transmit('R');
 318:	82 e5       	ldi	r24, 0x52	; 82
 31a:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
			UART_transmit('e');
 31e:	85 e6       	ldi	r24, 0x65	; 101
 320:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
			UART_transmit('s');
 324:	83 e7       	ldi	r24, 0x73	; 115
 326:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
			UART_transmit('e');
 32a:	85 e6       	ldi	r24, 0x65	; 101
 32c:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
			UART_transmit('t');
 330:	84 e7       	ldi	r24, 0x74	; 116
 332:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
			UART_transmit('\r');
 336:	8d e0       	ldi	r24, 0x0D	; 13
 338:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
			UART_transmit('\n');
 33c:	8a e0       	ldi	r24, 0x0A	; 10
 33e:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
            reset_cnt=0;
 342:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <reset_cnt>
 346:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <reset_cnt+0x1>
 34a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <reset_cnt+0x2>
 34e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <reset_cnt+0x3>
 352:	08 95       	ret
        }   
    }else
    {
      if(button_status)
 354:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <button_status>
 358:	88 23       	and	r24, r24
 35a:	b9 f0       	breq	.+46     	; 0x38a <button_read+0xea>
      {
        			UART_transmit('P');
 35c:	80 e5       	ldi	r24, 0x50	; 80
 35e:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
        			UART_transmit('r');
 362:	82 e7       	ldi	r24, 0x72	; 114
 364:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
        			UART_transmit('e');
 368:	85 e6       	ldi	r24, 0x65	; 101
 36a:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
        			UART_transmit('s');
 36e:	83 e7       	ldi	r24, 0x73	; 115
 370:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
        			UART_transmit('s');
 374:	83 e7       	ldi	r24, 0x73	; 115
 376:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
        			UART_transmit('\r');
 37a:	8d e0       	ldi	r24, 0x0D	; 13
 37c:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
        			UART_transmit('\n');
 380:	8a e0       	ldi	r24, 0x0A	; 10
 382:	0e 94 c8 03 	call	0x790	; 0x790 <UART_transmit>
        button_status=0;
 386:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <button_status>
      }
        reset_cnt=0;
 38a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <reset_cnt>
 38e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <reset_cnt+0x1>
 392:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <reset_cnt+0x2>
 396:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <reset_cnt+0x3>
 39a:	08 95       	ret

Disassembly of section .text.HC595_send_byte:

00000674 <HC595_send_byte>:
void HC595_send_byte(uint8_t data)
{
	uint8_t temp1	=	0;
	uint8_t i		=	0;
	
	for(i=0;i<8;i++)
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	11 c0       	rjmp	.+34     	; 0x69a <HC595_send_byte+0x26>
	{
		CLK_LOW;
 678:	98 b1       	in	r25, 0x08	; 8
 67a:	97 7f       	andi	r25, 0xF7	; 247
 67c:	98 b9       	out	0x08, r25	; 8
		temp1=data & 0b00000001;
		if(temp1)
 67e:	80 ff       	sbrs	r24, 0
 680:	04 c0       	rjmp	.+8      	; 0x68a <HC595_send_byte+0x16>
		DATA_HIGH;
 682:	98 b1       	in	r25, 0x08	; 8
 684:	91 60       	ori	r25, 0x01	; 1
 686:	98 b9       	out	0x08, r25	; 8
 688:	03 c0       	rjmp	.+6      	; 0x690 <HC595_send_byte+0x1c>
		else
		DATA_LOW;
 68a:	98 b1       	in	r25, 0x08	; 8
 68c:	9e 7f       	andi	r25, 0xFE	; 254
 68e:	98 b9       	out	0x08, r25	; 8
		CLK_HIGH;
 690:	98 b1       	in	r25, 0x08	; 8
 692:	98 60       	ori	r25, 0x08	; 8
 694:	98 b9       	out	0x08, r25	; 8
		data= data >> 1;
 696:	86 95       	lsr	r24
void HC595_send_byte(uint8_t data)
{
	uint8_t temp1	=	0;
	uint8_t i		=	0;
	
	for(i=0;i<8;i++)
 698:	2f 5f       	subi	r18, 0xFF	; 255
 69a:	28 30       	cpi	r18, 0x08	; 8
 69c:	68 f3       	brcs	.-38     	; 0x678 <HC595_send_byte+0x4>
		else
		DATA_LOW;
		CLK_HIGH;
		data= data >> 1;
	}
	CLK_LOW;
 69e:	88 b1       	in	r24, 0x08	; 8
 6a0:	87 7f       	andi	r24, 0xF7	; 247
 6a2:	88 b9       	out	0x08, r24	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	8a 95       	dec	r24
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <HC595_send_byte+0x32>
 6aa:	08 95       	ret

Disassembly of section .text.HC595_init:

0000051c <HC595_init>:
	_delay_loop_1(1);
}

void HC595_init()
{
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
		DDRC  = 0b00000010;  //  only Enable pin write mode
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	87 b9       	out	0x07, r24	; 7
		PORTC = 0b00000010; //  disable device
 524:	88 b9       	out	0x08, r24	; 8
		DDRC  = 0b00001111;  //  data,enable,latch,clk pin write mode
 526:	9f e0       	ldi	r25, 0x0F	; 15
 528:	97 b9       	out	0x07, r25	; 7
		PORTC = 0b00000010; //  initial state
 52a:	88 b9       	out	0x08, r24	; 8
		
		int init_cnt=0;
		for(init_cnt=0;init_cnt<3;init_cnt++)
 52c:	c0 e0       	ldi	r28, 0x00	; 0
 52e:	d0 e0       	ldi	r29, 0x00	; 0
 530:	04 c0       	rjmp	.+8      	; 0x53a <HC595_init+0x1e>
		{
				HC595_send_byte(0);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 3a 03 	call	0x674	; 0x674 <HC595_send_byte>
		PORTC = 0b00000010; //  disable device
		DDRC  = 0b00001111;  //  data,enable,latch,clk pin write mode
		PORTC = 0b00000010; //  initial state
		
		int init_cnt=0;
		for(init_cnt=0;init_cnt<3;init_cnt++)
 538:	21 96       	adiw	r28, 0x01	; 1
 53a:	c3 30       	cpi	r28, 0x03	; 3
 53c:	d1 05       	cpc	r29, r1
 53e:	cc f3       	brlt	.-14     	; 0x532 <HC595_init+0x16>
		{
				HC595_send_byte(0);
		}
		LATCH_HIGH;
 540:	88 b1       	in	r24, 0x08	; 8
 542:	84 60       	ori	r24, 0x04	; 4
 544:	88 b9       	out	0x08, r24	; 8
 546:	85 e0       	ldi	r24, 0x05	; 5
 548:	8a 95       	dec	r24
 54a:	f1 f7       	brne	.-4      	; 0x548 <HC595_init+0x2c>
		_delay_loop_1(5);
		LATCH_LOW;
 54c:	88 b1       	in	r24, 0x08	; 8
 54e:	8b 7f       	andi	r24, 0xFB	; 251
 550:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 552:	86 e6       	ldi	r24, 0x66	; 102
 554:	9e e0       	ldi	r25, 0x0E	; 14
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <HC595_init+0x3a>
 55a:	00 00       	nop
		_delay_ms(1);
		ENABLE;
 55c:	88 b1       	in	r24, 0x08	; 8
 55e:	8d 7f       	andi	r24, 0xFD	; 253
 560:	88 b9       	out	0x08, r24	; 8
		DATA_LOW;
 562:	88 b1       	in	r24, 0x08	; 8
 564:	8e 7f       	andi	r24, 0xFE	; 254
 566:	88 b9       	out	0x08, r24	; 8
		LATCH_LOW;
 568:	88 b1       	in	r24, 0x08	; 8
 56a:	8b 7f       	andi	r24, 0xFB	; 251
 56c:	88 b9       	out	0x08, r24	; 8
		CLK_LOW;
 56e:	88 b1       	in	r24, 0x08	; 8
 570:	87 7f       	andi	r24, 0xF7	; 247
 572:	88 b9       	out	0x08, r24	; 8
 574:	86 e6       	ldi	r24, 0x66	; 102
 576:	9e e0       	ldi	r25, 0x0E	; 14
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <HC595_init+0x5c>
 57c:	00 00       	nop
		_delay_ms(1);
}
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

Disassembly of section .text.HC595_latch:

0000077c <HC595_latch>:

void HC595_latch()
{
  LATCH_HIGH;
 77c:	88 b1       	in	r24, 0x08	; 8
 77e:	84 60       	ori	r24, 0x04	; 4
 780:	88 b9       	out	0x08, r24	; 8
 782:	85 e0       	ldi	r24, 0x05	; 5
 784:	8a 95       	dec	r24
 786:	f1 f7       	brne	.-4      	; 0x784 <HC595_latch+0x8>
	_delay_loop_1(5);
	LATCH_LOW;
 788:	88 b1       	in	r24, 0x08	; 8
 78a:	8b 7f       	andi	r24, 0xFB	; 251
 78c:	88 b9       	out	0x08, r24	; 8
 78e:	08 95       	ret

Disassembly of section .text.LED_SHOW:

000007a6 <LED_SHOW>:
}

void LED_SHOW()
{
  HC595_latch();
 7a6:	0e 94 be 03 	call	0x77c	; 0x77c <HC595_latch>
 7aa:	08 95       	ret

Disassembly of section .text.LED_SETTING:

000007ac <LED_SETTING>:
}
void LED_SETTING(uint8_t data)
{
  HC595_send_byte(data);
 7ac:	0e 94 3a 03 	call	0x674	; 0x674 <HC595_send_byte>
 7b0:	08 95       	ret

Disassembly of section .text.LED_BAR_SETUP:

000005ea <LED_BAR_SETUP>:
}

void LED_BAR_SETUP(uint8_t red, uint8_t green)
{
  for(int i=0;i<12;i++)
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	1c c0       	rjmp	.+56     	; 0x628 <LED_BAR_SETUP+0x3e>
  {
      LED_BAR_ARRAY[i][0]=(i<red);
 5f0:	48 2f       	mov	r20, r24
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	24 17       	cp	r18, r20
 5f8:	35 07       	cpc	r19, r21
 5fa:	0c f0       	brlt	.+2      	; 0x5fe <LED_BAR_SETUP+0x14>
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	f9 01       	movw	r30, r18
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	e0 50       	subi	r30, 0x00	; 0
 606:	ff 4f       	sbci	r31, 0xFF	; 255
 608:	90 83       	st	Z, r25
      LED_BAR_ARRAY[i][1]=(i<green);
 60a:	46 2f       	mov	r20, r22
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	24 17       	cp	r18, r20
 612:	35 07       	cpc	r19, r21
 614:	0c f0       	brlt	.+2      	; 0x618 <LED_BAR_SETUP+0x2e>
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	f9 01       	movw	r30, r18
 61a:	ee 0f       	add	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	e0 50       	subi	r30, 0x00	; 0
 620:	ff 4f       	sbci	r31, 0xFF	; 255
 622:	91 83       	std	Z+1, r25	; 0x01
  HC595_send_byte(data);
}

void LED_BAR_SETUP(uint8_t red, uint8_t green)
{
  for(int i=0;i<12;i++)
 624:	2f 5f       	subi	r18, 0xFF	; 255
 626:	3f 4f       	sbci	r19, 0xFF	; 255
 628:	2c 30       	cpi	r18, 0x0C	; 12
 62a:	31 05       	cpc	r19, r1
 62c:	0c f3       	brlt	.-62     	; 0x5f0 <LED_BAR_SETUP+0x6>
  {
      LED_BAR_ARRAY[i][0]=(i<red);
      LED_BAR_ARRAY[i][1]=(i<green);
  }
}
 62e:	08 95       	ret

Disassembly of section .text.CMD:

000000da <CMD>:
}

void CMD()
{
  if(UCSR0A & (1<<RXC0))
  da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  de:	88 23       	and	r24, r24
  e0:	0c f0       	brlt	.+2      	; 0xe4 <CMD+0xa>
  e2:	dd c0       	rjmp	.+442    	; 0x29e <CMD+0x1c4>
    {
      unsigned char c = UDR0;
  e4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      switch(mode)
  e8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <mode>
  ec:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <mode+0x1>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	91 05       	cpc	r25, r1
  f4:	99 f0       	breq	.+38     	; 0x11c <CMD+0x42>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	91 05       	cpc	r25, r1
  fa:	e9 f0       	breq	.+58     	; 0x136 <CMD+0x5c>
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	09 f0       	breq	.+2      	; 0x102 <CMD+0x28>
 100:	ca c0       	rjmp	.+404    	; 0x296 <CMD+0x1bc>
      {
        case header1:
          if(c==0xAA)
 102:	2a 3a       	cpi	r18, 0xAA	; 170
 104:	31 f4       	brne	.+12     	; 0x112 <CMD+0x38>
          {
            mode++;
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <mode+0x1>
 10c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <mode>
 110:	08 95       	ret
          }
          else
            mode=header1;
 112:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode+0x1>
 116:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode>
 11a:	08 95       	ret
        break;
        case header2:
          if(c==0x55)
 11c:	25 35       	cpi	r18, 0x55	; 85
 11e:	31 f4       	brne	.+12     	; 0x12c <CMD+0x52>
            mode++;
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <mode+0x1>
 126:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <mode>
 12a:	08 95       	ret
          else
            mode=header1;
 12c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode+0x1>
 130:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode>
 134:	08 95       	ret
        break;
        case cmd:
          if(c==0x00)
 136:	21 11       	cpse	r18, r1
 138:	07 c0       	rjmp	.+14     	; 0x148 <CMD+0x6e>
          {
            BOOT_DONE=0;
 13a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <BOOT_DONE>
            BOOT_LED_COLOR=GREEN;
 13e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <BOOT_LED_COLOR+0x1>
 142:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <BOOT_LED_COLOR>
 146:	a2 c0       	rjmp	.+324    	; 0x28c <CMD+0x1b2>
          }else if(c==0x01)
 148:	21 30       	cpi	r18, 0x01	; 1
 14a:	49 f4       	brne	.+18     	; 0x15e <CMD+0x84>
          {
            BOOT_DONE=0;
 14c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <BOOT_DONE>
            BOOT_LED_COLOR=RED;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <BOOT_LED_COLOR+0x1>
 158:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <BOOT_LED_COLOR>
 15c:	97 c0       	rjmp	.+302    	; 0x28c <CMD+0x1b2>
          }else if(c==0x02){
 15e:	22 30       	cpi	r18, 0x02	; 2
 160:	49 f4       	brne	.+18     	; 0x174 <CMD+0x9a>
            BOOT_DONE=0;
 162:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <BOOT_DONE>
            BOOT_LED_COLOR=YELLOW;
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <BOOT_LED_COLOR+0x1>
 16e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <BOOT_LED_COLOR>
 172:	8c c0       	rjmp	.+280    	; 0x28c <CMD+0x1b2>
          }else if(c==0x10){
 174:	20 31       	cpi	r18, 0x10	; 16
 176:	29 f4       	brne	.+10     	; 0x182 <CMD+0xa8>
            LED_BAR_SETUP(0,0);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 180:	85 c0       	rjmp	.+266    	; 0x28c <CMD+0x1b2>
          }else if(c==0x11){
 182:	21 31       	cpi	r18, 0x11	; 17
 184:	29 f4       	brne	.+10     	; 0x190 <CMD+0xb6>
            LED_BAR_SETUP(0,1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 18e:	7e c0       	rjmp	.+252    	; 0x28c <CMD+0x1b2>
          }else if(c==0x12){
 190:	22 31       	cpi	r18, 0x12	; 18
 192:	29 f4       	brne	.+10     	; 0x19e <CMD+0xc4>
            LED_BAR_SETUP(0,2);
 194:	62 e0       	ldi	r22, 0x02	; 2
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 19c:	77 c0       	rjmp	.+238    	; 0x28c <CMD+0x1b2>
          }else if(c==0x13){
 19e:	23 31       	cpi	r18, 0x13	; 19
 1a0:	29 f4       	brne	.+10     	; 0x1ac <CMD+0xd2>
            LED_BAR_SETUP(0,3);
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 1aa:	70 c0       	rjmp	.+224    	; 0x28c <CMD+0x1b2>
          }else if(c==0x14){
 1ac:	24 31       	cpi	r18, 0x14	; 20
 1ae:	29 f4       	brne	.+10     	; 0x1ba <CMD+0xe0>
            LED_BAR_SETUP(0,4);
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 1b8:	69 c0       	rjmp	.+210    	; 0x28c <CMD+0x1b2>
          }else if(c==0x15){
 1ba:	25 31       	cpi	r18, 0x15	; 21
 1bc:	29 f4       	brne	.+10     	; 0x1c8 <CMD+0xee>
            LED_BAR_SETUP(0,5);
 1be:	65 e0       	ldi	r22, 0x05	; 5
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 1c6:	62 c0       	rjmp	.+196    	; 0x28c <CMD+0x1b2>
          }else if(c==0x16){
 1c8:	26 31       	cpi	r18, 0x16	; 22
 1ca:	29 f4       	brne	.+10     	; 0x1d6 <CMD+0xfc>
            LED_BAR_SETUP(0,6);
 1cc:	66 e0       	ldi	r22, 0x06	; 6
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 1d4:	5b c0       	rjmp	.+182    	; 0x28c <CMD+0x1b2>
          }else if(c==0x17){
 1d6:	27 31       	cpi	r18, 0x17	; 23
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <CMD+0x10a>
            LED_BAR_SETUP(0,7);
 1da:	67 e0       	ldi	r22, 0x07	; 7
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 1e2:	54 c0       	rjmp	.+168    	; 0x28c <CMD+0x1b2>
          }else if(c==0x18){
 1e4:	28 31       	cpi	r18, 0x18	; 24
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <CMD+0x118>
            LED_BAR_SETUP(0,8);
 1e8:	68 e0       	ldi	r22, 0x08	; 8
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 1f0:	4d c0       	rjmp	.+154    	; 0x28c <CMD+0x1b2>
          }else if(c==0x19){
 1f2:	29 31       	cpi	r18, 0x19	; 25
 1f4:	29 f4       	brne	.+10     	; 0x200 <CMD+0x126>
            LED_BAR_SETUP(0,9);
 1f6:	69 e0       	ldi	r22, 0x09	; 9
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 1fe:	46 c0       	rjmp	.+140    	; 0x28c <CMD+0x1b2>
          }else if(c==0x1A){
 200:	2a 31       	cpi	r18, 0x1A	; 26
 202:	29 f4       	brne	.+10     	; 0x20e <CMD+0x134>
            LED_BAR_SETUP(0,10);
 204:	6a e0       	ldi	r22, 0x0A	; 10
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 20c:	3f c0       	rjmp	.+126    	; 0x28c <CMD+0x1b2>
          }else if(c==0x1B){
 20e:	2b 31       	cpi	r18, 0x1B	; 27
 210:	29 f4       	brne	.+10     	; 0x21c <CMD+0x142>
            LED_BAR_SETUP(0,11);
 212:	6b e0       	ldi	r22, 0x0B	; 11
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 21a:	38 c0       	rjmp	.+112    	; 0x28c <CMD+0x1b2>
          }else if(c==0x1C){
 21c:	2c 31       	cpi	r18, 0x1C	; 28
 21e:	29 f4       	brne	.+10     	; 0x22a <CMD+0x150>
            LED_BAR_SETUP(0,12);
 220:	6c e0       	ldi	r22, 0x0C	; 12
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 228:	31 c0       	rjmp	.+98     	; 0x28c <CMD+0x1b2>
          }else if(c>=0x20 && c<=0x70){
 22a:	80 ee       	ldi	r24, 0xE0	; 224
 22c:	82 0f       	add	r24, r18
 22e:	81 35       	cpi	r24, 0x51	; 81
 230:	a8 f4       	brcc	.+42     	; 0x25c <CMD+0x182>
            // FLASH PROCESS LED BAR
            PROCESS_DONE=0;
 232:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <PROCESS_DONE>
            //BAR_LED_COLOR=GREEN;
            PROCESS_TIME=(c-0x20)*10;
 236:	82 2f       	mov	r24, r18
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	80 97       	sbiw	r24, 0x20	; 32
 23c:	9c 01       	movw	r18, r24
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	82 0f       	add	r24, r18
 250:	93 1f       	adc	r25, r19
 252:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <PROCESS_TIME+0x1>
 256:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <PROCESS_TIME>
 25a:	18 c0       	rjmp	.+48     	; 0x28c <CMD+0x1b2>
          }else if(c==0x71){
 25c:	21 37       	cpi	r18, 0x71	; 113
 25e:	29 f4       	brne	.+10     	; 0x26a <CMD+0x190>
            BAR_LED_COLOR=GREEN;
 260:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <BAR_LED_COLOR+0x1>
 264:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <BAR_LED_COLOR>
 268:	11 c0       	rjmp	.+34     	; 0x28c <CMD+0x1b2>
          }else if(c==0x72){
 26a:	22 37       	cpi	r18, 0x72	; 114
 26c:	39 f4       	brne	.+14     	; 0x27c <CMD+0x1a2>
            BAR_LED_COLOR=RED;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <BAR_LED_COLOR+0x1>
 276:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <BAR_LED_COLOR>
 27a:	08 c0       	rjmp	.+16     	; 0x28c <CMD+0x1b2>
          }else if(c==0x73){
 27c:	23 37       	cpi	r18, 0x73	; 115
 27e:	31 f4       	brne	.+12     	; 0x28c <CMD+0x1b2>
            BAR_LED_COLOR=YELLOW;
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <BAR_LED_COLOR+0x1>
 288:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <BAR_LED_COLOR>
          }
          mode=header1;
 28c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode+0x1>
 290:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode>
        break;
 294:	08 95       	ret
        default:
          mode=header1;
 296:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode+0x1>
 29a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode>
 29e:	08 95       	ret

Disassembly of section .text.led_bar_init:

00000746 <led_bar_init>:


void led_bar_init()
{
  DDRB |=  (1<<ABCD_pin); // PB0 GPIO WRITE MODE
 746:	84 b1       	in	r24, 0x04	; 4
 748:	81 60       	ori	r24, 0x01	; 1
 74a:	84 b9       	out	0x04, r24	; 4
  DDRB |=  (1<<EFGH_pin); // PB1 GPIO WRITE MODE
 74c:	84 b1       	in	r24, 0x04	; 4
 74e:	82 60       	ori	r24, 0x02	; 2
 750:	84 b9       	out	0x04, r24	; 4
  DDRB |=  (1<<IJKL_pin); // PB2 GPIO WRITE MODE
 752:	84 b1       	in	r24, 0x04	; 4
 754:	84 60       	ori	r24, 0x04	; 4
 756:	84 b9       	out	0x04, r24	; 4
  HC595_init();
 758:	0e 94 8e 02 	call	0x51c	; 0x51c <HC595_init>
  LED_BAR_SETUP(0,0);
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
 764:	08 95       	ret

Disassembly of section .text.LED_SELECT:

00000630 <LED_SELECT>:
}

void LED_SELECT(uint8_t SEL_NUM)
{
  if(SEL_NUM==0)
 630:	81 11       	cpse	r24, r1
 632:	09 c0       	rjmp	.+18     	; 0x646 <LED_SELECT+0x16>
  {
    ABCD_ON;
 634:	95 b1       	in	r25, 0x05	; 5
 636:	91 60       	ori	r25, 0x01	; 1
 638:	95 b9       	out	0x05, r25	; 5
    EFGH_OFF;
 63a:	95 b1       	in	r25, 0x05	; 5
 63c:	9d 7f       	andi	r25, 0xFD	; 253
 63e:	95 b9       	out	0x05, r25	; 5
    IJKL_OFF;
 640:	95 b1       	in	r25, 0x05	; 5
 642:	9b 7f       	andi	r25, 0xFB	; 251
 644:	95 b9       	out	0x05, r25	; 5
  }
  if(SEL_NUM==1)
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	49 f4       	brne	.+18     	; 0x65c <LED_SELECT+0x2c>
  {
    ABCD_OFF;
 64a:	95 b1       	in	r25, 0x05	; 5
 64c:	9e 7f       	andi	r25, 0xFE	; 254
 64e:	95 b9       	out	0x05, r25	; 5
    EFGH_ON;
 650:	95 b1       	in	r25, 0x05	; 5
 652:	92 60       	ori	r25, 0x02	; 2
 654:	95 b9       	out	0x05, r25	; 5
    IJKL_OFF;
 656:	95 b1       	in	r25, 0x05	; 5
 658:	9b 7f       	andi	r25, 0xFB	; 251
 65a:	95 b9       	out	0x05, r25	; 5
  }
  if(SEL_NUM==2)
 65c:	82 30       	cpi	r24, 0x02	; 2
 65e:	49 f4       	brne	.+18     	; 0x672 <LED_SELECT+0x42>
  {
    ABCD_OFF;
 660:	85 b1       	in	r24, 0x05	; 5
 662:	8e 7f       	andi	r24, 0xFE	; 254
 664:	85 b9       	out	0x05, r24	; 5
    EFGH_OFF;
 666:	85 b1       	in	r24, 0x05	; 5
 668:	8d 7f       	andi	r24, 0xFD	; 253
 66a:	85 b9       	out	0x05, r24	; 5
    IJKL_ON;
 66c:	85 b1       	in	r24, 0x05	; 5
 66e:	84 60       	ori	r24, 0x04	; 4
 670:	85 b9       	out	0x05, r24	; 5
 672:	08 95       	ret

Disassembly of section .text.LED_BAR_RUN:

0000039c <LED_BAR_RUN>:
  }
}

void LED_BAR_RUN()
{
  cycle_wait++;
 39c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <cycle_wait>
 3a0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <cycle_wait+0x1>
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <cycle_wait+0x1>
 3aa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <cycle_wait>
  if(cycle_wait>300)
 3ae:	8d 32       	cpi	r24, 0x2D	; 45
 3b0:	91 40       	sbci	r25, 0x01	; 1
 3b2:	3c f0       	brlt	.+14     	; 0x3c2 <LED_BAR_RUN+0x26>
  {
    cycle_wait=0;
 3b4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <cycle_wait+0x1>
 3b8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <cycle_wait>
    LED_CHANGE=1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <LED_CHANGE>
  }

  if(LED_CHANGE)
 3c2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <LED_CHANGE>
 3c6:	88 23       	and	r24, r24
 3c8:	c1 f1       	breq	.+112    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
  { 
    
    position_select++;
 3ca:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <position_select>
 3ce:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <position_select+0x1>
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <position_select+0x1>
 3d8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <position_select>
    if(position_select>2)
 3dc:	03 97       	sbiw	r24, 0x03	; 3
 3de:	24 f0       	brlt	.+8      	; 0x3e8 <LED_BAR_RUN+0x4c>
    position_select=0;
 3e0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <position_select+0x1>
 3e4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <position_select>

    LED_CHANGE=0;
 3e8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <LED_CHANGE>
    uint8_t LED_DATA=0;
     for(int i=0;i<4;i++)
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
    position_select++;
    if(position_select>2)
    position_select=0;

    LED_CHANGE=0;
    uint8_t LED_DATA=0;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
     for(int i=0;i<4;i++)
 3f2:	18 c0       	rjmp	.+48     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     {
      LED_DATA=LED_DATA<<1;
 3f4:	88 0f       	add	r24, r24
      LED_DATA+=LED_BAR_ARRAY[position_select*4+i][RED];
 3f6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <position_select>
 3fa:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <position_select+0x1>
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	e2 0f       	add	r30, r18
 408:	f3 1f       	adc	r31, r19
 40a:	ee 0f       	add	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	e0 50       	subi	r30, 0x00	; 0
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	91 81       	ldd	r25, Z+1	; 0x01
 414:	89 0f       	add	r24, r25
      LED_DATA+=LED_BAR_ARRAY[position_select*4+i][GREEN]*16;
 416:	90 81       	ld	r25, Z
 418:	40 e1       	ldi	r20, 0x10	; 16
 41a:	94 9f       	mul	r25, r20
 41c:	80 0d       	add	r24, r0
 41e:	11 24       	eor	r1, r1
    if(position_select>2)
    position_select=0;

    LED_CHANGE=0;
    uint8_t LED_DATA=0;
     for(int i=0;i<4;i++)
 420:	2f 5f       	subi	r18, 0xFF	; 255
 422:	3f 4f       	sbci	r19, 0xFF	; 255
 424:	24 30       	cpi	r18, 0x04	; 4
 426:	31 05       	cpc	r19, r1
 428:	2c f3       	brlt	.-54     	; 0x3f4 <LED_BAR_RUN+0x58>
      LED_DATA=LED_DATA<<1;
      LED_DATA+=LED_BAR_ARRAY[position_select*4+i][RED];
      LED_DATA+=LED_BAR_ARRAY[position_select*4+i][GREEN]*16;
     }

    LED_SETTING(LED_DATA);
 42a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LED_SETTING>
    LED_SELECT(position_select);
 42e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <position_select>
 432:	0e 94 18 03 	call	0x630	; 0x630 <LED_SELECT>
    LED_SHOW();
 436:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_SHOW>
 43a:	08 95       	ret

Disassembly of section .text.BOOT_LED_LOGIC:

0000043c <BOOT_LED_LOGIC>:
int BOOT_LED_COLOR=GREEN;
int boot_cycle_wait=0;
int boot_logic_cnt=0;
uint8_t BOOT_DONE=0;
void BOOT_LED_LOGIC()
{
 43c:	cf 93       	push	r28
  if(BOOT_DONE==0)
 43e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <BOOT_DONE>
 442:	81 11       	cpse	r24, r1
 444:	32 c0       	rjmp	.+100    	; 0x4aa <BOOT_LED_LOGIC+0x6e>
  {
    boot_logic_cnt++;
 446:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <boot_logic_cnt>
 44a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <boot_logic_cnt+0x1>
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <boot_logic_cnt+0x1>
 454:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <boot_logic_cnt>
    if(boot_logic_cnt>=13)
 458:	0d 97       	sbiw	r24, 0x0d	; 13
 45a:	3c f0       	brlt	.+14     	; 0x46a <BOOT_LED_LOGIC+0x2e>
    {
      boot_logic_cnt=0;
 45c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <boot_logic_cnt+0x1>
 460:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <boot_logic_cnt>
      BOOT_DONE=1;
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <BOOT_DONE>
    }

    uint8_t led_level = boot_logic_cnt;
 46a:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <boot_logic_cnt>
    if(BOOT_LED_COLOR==GREEN)
 46e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <BOOT_LED_COLOR>
 472:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <BOOT_LED_COLOR+0x1>
 476:	89 2b       	or	r24, r25
 478:	21 f4       	brne	.+8      	; 0x482 <BOOT_LED_LOGIC+0x46>
      LED_BAR_SETUP(0,led_level);
 47a:	6c 2f       	mov	r22, r28
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
    if(BOOT_LED_COLOR==RED)
 482:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <BOOT_LED_COLOR>
 486:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <BOOT_LED_COLOR+0x1>
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	21 f4       	brne	.+8      	; 0x496 <BOOT_LED_LOGIC+0x5a>
      LED_BAR_SETUP(led_level,0);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	8c 2f       	mov	r24, r28
 492:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
    if(BOOT_LED_COLOR==YELLOW)
 496:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <BOOT_LED_COLOR>
 49a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <BOOT_LED_COLOR+0x1>
 49e:	02 97       	sbiw	r24, 0x02	; 2
 4a0:	21 f4       	brne	.+8      	; 0x4aa <BOOT_LED_LOGIC+0x6e>
      LED_BAR_SETUP(led_level,led_level);
 4a2:	6c 2f       	mov	r22, r28
 4a4:	8c 2f       	mov	r24, r28
 4a6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>

  }
}
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

Disassembly of section .text.BOOT_LED:

000006de <BOOT_LED>:
void BOOT_LED()
{
  boot_cycle_wait++;
 6de:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <boot_cycle_wait>
 6e2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <boot_cycle_wait+0x1>
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <boot_cycle_wait+0x1>
 6ec:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <boot_cycle_wait>
  if(boot_cycle_wait>30000)
 6f0:	81 33       	cpi	r24, 0x31	; 49
 6f2:	95 47       	sbci	r25, 0x75	; 117
 6f4:	34 f0       	brlt	.+12     	; 0x702 <BOOT_LED+0x24>
  {
    boot_cycle_wait=0;
 6f6:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <boot_cycle_wait+0x1>
 6fa:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <boot_cycle_wait>
    BOOT_LED_LOGIC();
 6fe:	0e 94 1e 02 	call	0x43c	; 0x43c <BOOT_LED_LOGIC>
 702:	08 95       	ret

Disassembly of section .text.PROCESS_LED_LOGIC:

00000584 <PROCESS_LED_LOGIC>:
int process_bar_cycle_wait=0;
int process_bar_tims_second=0;
uint8_t Process_level=0;
uint8_t PROCESS_DONE=1;
void PROCESS_LED_LOGIC()
{
 584:	cf 93       	push	r28
  if(PROCESS_DONE==0)
 586:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <PROCESS_DONE>
 58a:	81 11       	cpse	r24, r1
 58c:	2c c0       	rjmp	.+88     	; 0x5e6 <PROCESS_LED_LOGIC+0x62>
  {
    Process_level++;
 58e:	c0 91 33 01 	lds	r28, 0x0133	; 0x800133 <Process_level>
 592:	cf 5f       	subi	r28, 0xFF	; 255
 594:	c0 93 33 01 	sts	0x0133, r28	; 0x800133 <Process_level>

    uint8_t led_level = Process_level;
    if(BAR_LED_COLOR==GREEN)
 598:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <BAR_LED_COLOR>
 59c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <BAR_LED_COLOR+0x1>
 5a0:	89 2b       	or	r24, r25
 5a2:	21 f4       	brne	.+8      	; 0x5ac <PROCESS_LED_LOGIC+0x28>
      LED_BAR_SETUP(0,led_level);
 5a4:	6c 2f       	mov	r22, r28
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
    if(BAR_LED_COLOR==RED)
 5ac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <BAR_LED_COLOR>
 5b0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <BAR_LED_COLOR+0x1>
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <PROCESS_LED_LOGIC+0x3c>
      LED_BAR_SETUP(led_level,0);
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	8c 2f       	mov	r24, r28
 5bc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>
    if(BAR_LED_COLOR==YELLOW)
 5c0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <BAR_LED_COLOR>
 5c4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <BAR_LED_COLOR+0x1>
 5c8:	02 97       	sbiw	r24, 0x02	; 2
 5ca:	21 f4       	brne	.+8      	; 0x5d4 <PROCESS_LED_LOGIC+0x50>
      LED_BAR_SETUP(led_level,led_level);
 5cc:	6c 2f       	mov	r22, r28
 5ce:	8c 2f       	mov	r24, r28
 5d0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_BAR_SETUP>

    if(Process_level>=12)
 5d4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Process_level>
 5d8:	8c 30       	cpi	r24, 0x0C	; 12
 5da:	28 f0       	brcs	.+10     	; 0x5e6 <PROCESS_LED_LOGIC+0x62>
    {
      Process_level=0;
 5dc:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Process_level>
      PROCESS_DONE=1;
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <PROCESS_DONE>
    }

  }
}
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret

Disassembly of section .text.PROCESS_BAR_LED:

000004ae <PROCESS_BAR_LED>:

void PROCESS_BAR_LED()
{
  process_bar_cycle_wait++;
 4ae:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <process_bar_cycle_wait>
 4b2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <process_bar_cycle_wait+0x1>
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <process_bar_cycle_wait+0x1>
 4bc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <process_bar_cycle_wait>
  if(process_bar_cycle_wait>one_second_cnt)
 4c0:	8d 34       	cpi	r24, 0x4D	; 77
 4c2:	9d 41       	sbci	r25, 0x1D	; 29
 4c4:	6c f0       	brlt	.+26     	; 0x4e0 <PROCESS_BAR_LED+0x32>
  {
    process_bar_cycle_wait=0;
 4c6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <process_bar_cycle_wait+0x1>
 4ca:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <process_bar_cycle_wait>
    process_bar_tims_second++;
 4ce:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <process_bar_tims_second>
 4d2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <process_bar_tims_second+0x1>
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <process_bar_tims_second+0x1>
 4dc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <process_bar_tims_second>
  }
  if(PROCESS_TIME<=10)
 4e0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <PROCESS_TIME>
 4e4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <PROCESS_TIME+0x1>
 4e8:	0b 97       	sbiw	r24, 0x0b	; 11
 4ea:	34 f4       	brge	.+12     	; 0x4f8 <PROCESS_BAR_LED+0x4a>
    PROCESS_TIME=10;
 4ec:	8a e0       	ldi	r24, 0x0A	; 10
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <PROCESS_TIME+0x1>
 4f4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <PROCESS_TIME>
  if(process_bar_tims_second>PROCESS_TIME)
 4f8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <process_bar_tims_second>
 4fc:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <process_bar_tims_second+0x1>
 500:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <PROCESS_TIME>
 504:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <PROCESS_TIME+0x1>
 508:	82 17       	cp	r24, r18
 50a:	93 07       	cpc	r25, r19
 50c:	34 f4       	brge	.+12     	; 0x51a <PROCESS_BAR_LED+0x6c>
  {
    process_bar_tims_second=0;
 50e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <process_bar_tims_second+0x1>
 512:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <process_bar_tims_second>
    PROCESS_LED_LOGIC();
 516:	0e 94 c2 02 	call	0x584	; 0x584 <PROCESS_LED_LOGIC>
 51a:	08 95       	ret

Disassembly of section .text.main:

00000704 <main>:
#include "led_motion.h"
#include "process_bar.h"

int main(void)
{
	  uart_init();
 704:	0e 94 93 03 	call	0x726	; 0x726 <uart_init>
	  led_bar_init();
 708:	0e 94 a3 03 	call	0x746	; 0x746 <led_bar_init>
	  button_init();
 70c:	0e 94 cf 03 	call	0x79e	; 0x79e <button_init>
	  
    while(1)
    {
       PROCESS_BAR_LED();
 710:	0e 94 57 02 	call	0x4ae	; 0x4ae <PROCESS_BAR_LED>
       BOOT_LED();
 714:	0e 94 6f 03 	call	0x6de	; 0x6de <BOOT_LED>
       LED_BAR_RUN();
 718:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_BAR_RUN>
       CMD();
 71c:	0e 94 6d 00 	call	0xda	; 0xda <__data_load_end>
       button_read();
 720:	0e 94 50 01 	call	0x2a0	; 0x2a0 <button_read>
 724:	f5 cf       	rjmp	.-22     	; 0x710 <main+0xc>

Disassembly of section .text.__dummy_fini:

000007ba <_fini>:
 7ba:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000007bc <__funcs_on_exit>:
 7bc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000007be <__simulator_exit>:
 7be:	08 95       	ret

Disassembly of section .text.exit:

00000766 <exit>:
 766:	ec 01       	movw	r28, r24
 768:	0e 94 de 03 	call	0x7bc	; 0x7bc <__funcs_on_exit>
 76c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_fini>
 770:	ce 01       	movw	r24, r28
 772:	0e 94 df 03 	call	0x7be	; 0x7be <__simulator_exit>
 776:	ce 01       	movw	r24, r28
 778:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Exit>

Disassembly of section .text._Exit:

000007b6 <_Exit>:
 7b6:	0e 94 6b 00 	call	0xd6	; 0xd6 <_exit>
