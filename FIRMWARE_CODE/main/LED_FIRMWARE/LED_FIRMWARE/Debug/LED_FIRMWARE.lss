
LED_FIRMWARE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009c8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001449  00000000  00000000  00000ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076a  00000000  00000000  00001f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a58  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000212  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b9  00000000  00000000  000034c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  0000387b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000862  00000862  000009b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003964  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.uart_init 00000020  000007a4  000007a4  000008f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_transmit 0000000e  00000820  00000820  00000974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ex_power_init 00000008  0000082e  0000082e  00000982  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ex_power_up 00000008  00000836  00000836  0000098a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ex_power_down 00000008  0000083e  0000083e  00000992  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.button_led_on 00000008  00000846  00000846  0000099a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.button_led_off 00000008  0000084e  0000084e  000009a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.button_init 00000012  0000080e  0000080e  00000962  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.filtered_button 00000044  00000694  00000694  000007e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.button_read 000000fc  000002d4  000002d4  00000428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.HC595_send_byte 00000038  0000071c  0000071c  00000870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.HC595_init 00000098  00000470  00000470  000005c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.HC595_latch 00000014  000007fa  000007fa  0000094e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LED_SHOW 00000006  00000856  00000856  000009aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LED_SETTING 00000006  0000085c  0000085c  000009b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.LED_BAR_SETUP 00000046  0000064e  0000064e  000007a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.CMD     000001ee  000000e6  000000e6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.led_bar_init 00000020  000007c4  000007c4  00000918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.LED_SELECT 00000044  000006d8  000006d8  0000082c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.LED_BAR_RUN 000000a0  000003d0  000003d0  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.BOOT_LED_LOGIC 00000072  00000508  00000508  0000065c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.BOOT_LED 00000026  0000077e  0000077e  000008d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.PROCESS_LED_LOGIC 00000066  000005e8  000005e8  0000073c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.PROCESS_BAR_LED 0000006e  0000057a  0000057a  000006ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.main    0000002a  00000754  00000754  000008a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .data.PROCESS_DONE 00000001  00800132  00000872  000009c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 40 .bss.Process_level 00000001  00800133  00800133  000009c8  2**0
                  ALLOC
 41 .bss.process_bar_tims_second 00000002  0080011c  0080011c  000009c8  2**0
                  ALLOC
 42 .bss.process_bar_cycle_wait 00000002  0080011e  0080011e  000009c8  2**0
                  ALLOC
 43 .bss.BAR_LED_COLOR 00000002  00800120  00800120  000009c8  2**0
                  ALLOC
 44 .data.PROCESS_TIME 00000002  00800122  00000870  000009c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 45 .bss.BOOT_DONE 00000001  00800134  00800134  000009c8  2**0
                  ALLOC
 46 .bss.boot_logic_cnt 00000002  00800124  00800124  000009c8  2**0
                  ALLOC
 47 .bss.boot_cycle_wait 00000002  00800126  00800126  000009c8  2**0
                  ALLOC
 48 .bss.BOOT_LED_COLOR 00000002  00800128  00800128  000009c8  2**0
                  ALLOC
 49 .bss.LED_BAR_ARRAY 00000018  00800100  00800100  000009c8  2**0
                  ALLOC
 50 .bss.LED_CHANGE 00000001  00800135  00800135  000009c8  2**0
                  ALLOC
 51 .bss.position_select 00000002  0080012a  0080012a  000009c8  2**0
                  ALLOC
 52 .bss.cycle_wait 00000002  0080012c  0080012c  000009c8  2**0
                  ALLOC
 53 .bss.button_status 00000001  00800136  00800136  000009c8  2**0
                  ALLOC
 54 .data.button_cnt 00000001  00800137  00000873  000009c7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 55 .bss.button   00000001  00800138  00800138  000009c8  2**0
                  ALLOC
 56 .bss.reset_cnt 00000004  00800118  00800118  000009c8  2**0
                  ALLOC
 57 .bss.wait_time 00000002  0080012e  0080012e  000009c8  2**0
                  ALLOC
 58 .bss.mode     00000002  00800130  00800130  000009c8  2**0
                  ALLOC
 59 .text.__dummy_fini 00000002  0000086a  0000086a  000009be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__dummy_funcs_on_exit 00000002  0000086c  0000086c  000009c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.__dummy_simulator_exit 00000002  0000086e  0000086e  000009c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.exit    00000016  000007e4  000007e4  00000938  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text._Exit   00000004  00000866  00000866  000009ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
   8:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
   c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  10:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  14:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  18:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  1c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  20:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  24:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  28:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  2c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  30:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  34:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  38:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  3c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  40:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  44:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  48:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  4c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  50:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  54:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  58:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  5c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  60:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  64:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 22       	and	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	22 01       	movw	r4, r4
  70:	24 00       	.word	0x0024	; ????
  72:	08 70       	andi	r16, 0x08	; 8
  74:	01 24       	eor	r0, r1
  76:	01 32       	cpi	r16, 0x21	; 33
  78:	80 01       	movw	r16, r0
  7a:	32 01       	movw	r6, r4
  7c:	33 00       	.word	0x0033	; ????
  7e:	08 72       	andi	r16, 0x28	; 40
  80:	01 33       	cpi	r16, 0x31	; 49
  82:	01 37       	cpi	r16, 0x71	; 113
  84:	80 01       	movw	r16, r0
  86:	37 01       	movw	r6, r14
  88:	38 00       	.word	0x0038	; ????
  8a:	08 73       	andi	r16, 0x38	; 56
  8c:	01 38       	cpi	r16, 0x81	; 129
  8e:	01 39       	cpi	r16, 0x91	; 145
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d8 e0       	ldi	r29, 0x08	; 8
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	17 c0       	rjmp	.+46     	; 0xd4 <__do_clear_bss+0x8>
  a6:	b5 91       	lpm	r27, Z+
  a8:	a5 91       	lpm	r26, Z+
  aa:	35 91       	lpm	r19, Z+
  ac:	25 91       	lpm	r18, Z+
  ae:	05 91       	lpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0c c0       	rjmp	.+24     	; 0xcc <__do_clear_bss>
  b4:	95 91       	lpm	r25, Z+
  b6:	85 91       	lpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a2 17       	cp	r26, r18
  c4:	b3 07       	cpc	r27, r19
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x20>
  c8:	fe 01       	movw	r30, r28
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <__do_clear_bss+0x8>

000000cc <__do_clear_bss>:
  cc:	1d 92       	st	X+, r1
  ce:	a2 17       	cp	r26, r18
  d0:	b3 07       	cpc	r27, r19
  d2:	e1 f7       	brne	.-8      	; 0xcc <__do_clear_bss>
  d4:	e1 39       	cpi	r30, 0x91	; 145
  d6:	f4 07       	cpc	r31, r20
  d8:	31 f7       	brne	.-52     	; 0xa6 <__do_copy_data+0x8>
  da:	0e 94 aa 03 	call	0x754	; 0x754 <main>
  de:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <exit>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>

Disassembly of section .text:

00000862 <__bad_interrupt>:
 862:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.uart_init:

000007a4 <uart_init>:

int mode    =   header1;

void uart_init()
{
		UCSR0A = 0;
 7a4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
		UCSR0B = 0;
 7a8:	e1 ec       	ldi	r30, 0xC1	; 193
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	10 82       	st	Z, r1
		UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 7ae:	86 e0       	ldi	r24, 0x06	; 6
 7b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		UBRR0H = 0;
 7b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		UBRR0L = 95; // 115200 = 7 , 230400 = 3
 7b8:	8f e5       	ldi	r24, 0x5F	; 95
 7ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		UCSR0B = (1<<RXEN0) | (1<<TXEN0) ;
 7be:	88 e1       	ldi	r24, 0x18	; 24
 7c0:	80 83       	st	Z, r24
 7c2:	08 95       	ret

Disassembly of section .text.UART_transmit:

00000820 <UART_transmit>:
}

void UART_transmit(uint8_t data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 820:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 824:	95 ff       	sbrs	r25, 5
 826:	fc cf       	rjmp	.-8      	; 0x820 <UART_transmit>
	UDR0 = data;
 828:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 82c:	08 95       	ret

Disassembly of section .text.ex_power_init:

0000082e <ex_power_init>:
#define EX_POWER_DOWN	PORTC &= ~(1<<PORTC4)


void ex_power_init()
{
	DDRC |=  (1<<DDC4); // PC4 GPIO OUTPUT MODE
 82e:	87 b1       	in	r24, 0x07	; 7
 830:	80 61       	ori	r24, 0x10	; 16
 832:	87 b9       	out	0x07, r24	; 7
 834:	08 95       	ret

Disassembly of section .text.ex_power_up:

00000836 <ex_power_up>:
}

void ex_power_up()
{
	EX_POWER_UP;
 836:	88 b1       	in	r24, 0x08	; 8
 838:	80 61       	ori	r24, 0x10	; 16
 83a:	88 b9       	out	0x08, r24	; 8
 83c:	08 95       	ret

Disassembly of section .text.ex_power_down:

0000083e <ex_power_down>:
}

void ex_power_down()
{
	EX_POWER_DOWN;
 83e:	88 b1       	in	r24, 0x08	; 8
 840:	8f 7e       	andi	r24, 0xEF	; 239
 842:	88 b9       	out	0x08, r24	; 8
 844:	08 95       	ret

Disassembly of section .text.button_led_on:

00000846 <button_led_on>:
  button_led_off();
}

void button_led_on()
{
	BUTTON_LED_ON;
 846:	8b b1       	in	r24, 0x0b	; 11
 848:	80 62       	ori	r24, 0x20	; 32
 84a:	8b b9       	out	0x0b, r24	; 11
 84c:	08 95       	ret

Disassembly of section .text.button_led_off:

0000084e <button_led_off>:
}

void button_led_off()
{
	BUTTON_LED_OFF;
 84e:	8b b1       	in	r24, 0x0b	; 11
 850:	8f 7d       	andi	r24, 0xDF	; 223
 852:	8b b9       	out	0x0b, r24	; 11
 854:	08 95       	ret

Disassembly of section .text.button_init:

0000080e <button_init>:

extern void UART_transmit(uint8_t data);

void button_init()
{
  DDRD &=  ~(1<<DDD2);	// PD2 GPIO INPUT MODE
 80e:	8a b1       	in	r24, 0x0a	; 10
 810:	8b 7f       	andi	r24, 0xFB	; 251
 812:	8a b9       	out	0x0a, r24	; 10
  DDRD |=  (1<<DDD5);	// PD5 GPIO OUTPUT MODE
 814:	8a b1       	in	r24, 0x0a	; 10
 816:	80 62       	ori	r24, 0x20	; 32
 818:	8a b9       	out	0x0a, r24	; 10
  button_led_off();
 81a:	0e 94 27 04 	call	0x84e	; 0x84e <button_led_off>
 81e:	08 95       	ret

Disassembly of section .text.filtered_button:

00000694 <filtered_button>:
uint8_t button=0;

uint8_t button_cnt=128;
void filtered_button()
{
  if((PIND & (1 << PIND2)) != (1 << PIND2))
 694:	4a 99       	sbic	0x09, 2	; 9
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <filtered_button+0xe>
  {
    button_cnt++;
 698:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <button_cnt>
 69c:	8f 5f       	subi	r24, 0xFF	; 255
 69e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <button_cnt>
  }
  if((PIND & (1 << PIND2)) == (1 << PIND2))
 6a2:	4a 9b       	sbis	0x09, 2	; 9
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <filtered_button+0x1c>
  {
    button_cnt--;
 6a6:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <button_cnt>
 6aa:	81 50       	subi	r24, 0x01	; 1
 6ac:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <button_cnt>
  }

  if(button_cnt>228)
 6b0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <button_cnt>
 6b4:	85 3e       	cpi	r24, 0xE5	; 229
 6b6:	30 f0       	brcs	.+12     	; 0x6c4 <filtered_button+0x30>
  {
    button=1;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <button>
    button_cnt=228;
 6be:	84 ee       	ldi	r24, 0xE4	; 228
 6c0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <button_cnt>
  }
  if(button_cnt<28)
 6c4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <button_cnt>
 6c8:	8c 31       	cpi	r24, 0x1C	; 28
 6ca:	28 f4       	brcc	.+10     	; 0x6d6 <filtered_button+0x42>
  {
    button=0;
 6cc:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <button>
    button_cnt=28;
 6d0:	8c e1       	ldi	r24, 0x1C	; 28
 6d2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <button_cnt>
 6d6:	08 95       	ret

Disassembly of section .text.button_read:

000002d4 <button_read>:
}

uint8_t button_status=0;
void button_read()
{
filtered_button();
 2d4:	0e 94 4a 03 	call	0x694	; 0x694 <filtered_button>

wait_time--;
 2d8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <wait_time>
 2dc:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <wait_time+0x1>
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <wait_time+0x1>
 2e6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <wait_time>
if(wait_time<0)
 2ea:	99 23       	and	r25, r25
 2ec:	24 f4       	brge	.+8      	; 0x2f6 <button_read+0x22>
wait_time=0;
 2ee:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <wait_time+0x1>
 2f2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <wait_time>

if(wait_time==0)
 2f6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <wait_time>
 2fa:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <wait_time+0x1>
 2fe:	89 2b       	or	r24, r25
 300:	09 f0       	breq	.+2      	; 0x304 <button_read+0x30>
 302:	65 c0       	rjmp	.+202    	; 0x3ce <button_read+0xfa>
{
    if (button) 
 304:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <button>
 308:	88 23       	and	r24, r24
 30a:	f1 f1       	breq	.+124    	; 0x388 <button_read+0xb4>
    {
        button_status=button;
 30c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <button_status>
        wait_time=30000;
 310:	80 e3       	ldi	r24, 0x30	; 48
 312:	95 e7       	ldi	r25, 0x75	; 117
 314:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <wait_time+0x1>
 318:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <wait_time>
        reset_cnt++;
 31c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <reset_cnt>
 320:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <reset_cnt+0x1>
 324:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <reset_cnt+0x2>
 328:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <reset_cnt+0x3>
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	a1 1d       	adc	r26, r1
 330:	b1 1d       	adc	r27, r1
 332:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <reset_cnt>
 336:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <reset_cnt+0x1>
 33a:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <reset_cnt+0x2>
 33e:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <reset_cnt+0x3>
        if(reset_cnt>30)
 342:	4f 97       	sbiw	r24, 0x1f	; 31
 344:	a1 05       	cpc	r26, r1
 346:	b1 05       	cpc	r27, r1
 348:	0c f4       	brge	.+2      	; 0x34c <button_read+0x78>
 34a:	41 c0       	rjmp	.+130    	; 0x3ce <button_read+0xfa>
        {
			UART_transmit('R');
 34c:	82 e5       	ldi	r24, 0x52	; 82
 34e:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
			UART_transmit('e');
 352:	85 e6       	ldi	r24, 0x65	; 101
 354:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
			UART_transmit('s');
 358:	83 e7       	ldi	r24, 0x73	; 115
 35a:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
			UART_transmit('e');
 35e:	85 e6       	ldi	r24, 0x65	; 101
 360:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
			UART_transmit('t');
 364:	84 e7       	ldi	r24, 0x74	; 116
 366:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
			UART_transmit('\r');
 36a:	8d e0       	ldi	r24, 0x0D	; 13
 36c:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
			UART_transmit('\n');
 370:	8a e0       	ldi	r24, 0x0A	; 10
 372:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
            reset_cnt=0;
 376:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <reset_cnt>
 37a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <reset_cnt+0x1>
 37e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <reset_cnt+0x2>
 382:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <reset_cnt+0x3>
 386:	08 95       	ret
        }   
    }else
    {
      if(button_status)
 388:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <button_status>
 38c:	88 23       	and	r24, r24
 38e:	b9 f0       	breq	.+46     	; 0x3be <button_read+0xea>
      {
        			UART_transmit('P');
 390:	80 e5       	ldi	r24, 0x50	; 80
 392:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
        			UART_transmit('r');
 396:	82 e7       	ldi	r24, 0x72	; 114
 398:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
        			UART_transmit('e');
 39c:	85 e6       	ldi	r24, 0x65	; 101
 39e:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
        			UART_transmit('s');
 3a2:	83 e7       	ldi	r24, 0x73	; 115
 3a4:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
        			UART_transmit('s');
 3a8:	83 e7       	ldi	r24, 0x73	; 115
 3aa:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
        			UART_transmit('\r');
 3ae:	8d e0       	ldi	r24, 0x0D	; 13
 3b0:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
        			UART_transmit('\n');
 3b4:	8a e0       	ldi	r24, 0x0A	; 10
 3b6:	0e 94 10 04 	call	0x820	; 0x820 <UART_transmit>
        button_status=0;
 3ba:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <button_status>
      }
        reset_cnt=0;
 3be:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <reset_cnt>
 3c2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <reset_cnt+0x1>
 3c6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <reset_cnt+0x2>
 3ca:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <reset_cnt+0x3>
 3ce:	08 95       	ret

Disassembly of section .text.HC595_send_byte:

0000071c <HC595_send_byte>:
void HC595_send_byte(uint8_t data)
{
	uint8_t temp1	=	0;
	uint8_t i		=	0;
	
	for(i=0;i<8;i++)
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	11 c0       	rjmp	.+34     	; 0x742 <HC595_send_byte+0x26>
	{
		CLK_LOW;
 720:	98 b1       	in	r25, 0x08	; 8
 722:	97 7f       	andi	r25, 0xF7	; 247
 724:	98 b9       	out	0x08, r25	; 8
		temp1=data & 0b00000001;
		if(temp1)
 726:	80 ff       	sbrs	r24, 0
 728:	04 c0       	rjmp	.+8      	; 0x732 <HC595_send_byte+0x16>
		DATA_HIGH;
 72a:	98 b1       	in	r25, 0x08	; 8
 72c:	91 60       	ori	r25, 0x01	; 1
 72e:	98 b9       	out	0x08, r25	; 8
 730:	03 c0       	rjmp	.+6      	; 0x738 <HC595_send_byte+0x1c>
		else
		DATA_LOW;
 732:	98 b1       	in	r25, 0x08	; 8
 734:	9e 7f       	andi	r25, 0xFE	; 254
 736:	98 b9       	out	0x08, r25	; 8
		CLK_HIGH;
 738:	98 b1       	in	r25, 0x08	; 8
 73a:	98 60       	ori	r25, 0x08	; 8
 73c:	98 b9       	out	0x08, r25	; 8
		data= data >> 1;
 73e:	86 95       	lsr	r24
void HC595_send_byte(uint8_t data)
{
	uint8_t temp1	=	0;
	uint8_t i		=	0;
	
	for(i=0;i<8;i++)
 740:	2f 5f       	subi	r18, 0xFF	; 255
 742:	28 30       	cpi	r18, 0x08	; 8
 744:	68 f3       	brcs	.-38     	; 0x720 <HC595_send_byte+0x4>
		else
		DATA_LOW;
		CLK_HIGH;
		data= data >> 1;
	}
	CLK_LOW;
 746:	88 b1       	in	r24, 0x08	; 8
 748:	87 7f       	andi	r24, 0xF7	; 247
 74a:	88 b9       	out	0x08, r24	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	8a 95       	dec	r24
 750:	f1 f7       	brne	.-4      	; 0x74e <HC595_send_byte+0x32>
 752:	08 95       	ret

Disassembly of section .text.HC595_init:

00000470 <HC595_init>:
	_delay_loop_1(1);
}

void HC595_init()
{
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
	#define data_pin 0
	#define enable_pin 1
	#define latch_pin 2
	#define clk_pin 3
	
		DDRC |=  (1<<enable_pin);  //  only Enable pin write mode
 474:	87 b1       	in	r24, 0x07	; 7
 476:	82 60       	ori	r24, 0x02	; 2
 478:	87 b9       	out	0x07, r24	; 7
		PORTC|=  (1<<enable_pin); //disable device
 47a:	88 b1       	in	r24, 0x08	; 8
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	88 b9       	out	0x08, r24	; 8
		
		DDRC |=  (1<<data_pin);		//  data pin write mode
 480:	87 b1       	in	r24, 0x07	; 7
 482:	81 60       	ori	r24, 0x01	; 1
 484:	87 b9       	out	0x07, r24	; 7
		DDRC |=  (1<<enable_pin);	//  enable pin write mode
 486:	87 b1       	in	r24, 0x07	; 7
 488:	82 60       	ori	r24, 0x02	; 2
 48a:	87 b9       	out	0x07, r24	; 7
		DDRC |=  (1<<latch_pin);	//  latch pin write mode
 48c:	87 b1       	in	r24, 0x07	; 7
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	87 b9       	out	0x07, r24	; 7
		DDRC |=  (1<<clk_pin);		//  clk pin write mode
 492:	87 b1       	in	r24, 0x07	; 7
 494:	88 60       	ori	r24, 0x08	; 8
 496:	87 b9       	out	0x07, r24	; 7
		
		PORTC|=  (1<<enable_pin);	//initial state
 498:	88 b1       	in	r24, 0x08	; 8
 49a:	82 60       	ori	r24, 0x02	; 2
 49c:	88 b9       	out	0x08, r24	; 8
		PORTC&=  ~(1<<data_pin);	//initial state
 49e:	88 b1       	in	r24, 0x08	; 8
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	88 b9       	out	0x08, r24	; 8
		PORTC&=  ~(1<<latch_pin);	//initial state
 4a4:	88 b1       	in	r24, 0x08	; 8
 4a6:	8b 7f       	andi	r24, 0xFB	; 251
 4a8:	88 b9       	out	0x08, r24	; 8
		PORTC&=  ~(1<<clk_pin);		//initial state
 4aa:	88 b1       	in	r24, 0x08	; 8
 4ac:	87 7f       	andi	r24, 0xF7	; 247
 4ae:	88 b9       	out	0x08, r24	; 8
		
		int init_cnt=0;
		for(init_cnt=0;init_cnt<3;init_cnt++)
 4b0:	c0 e0       	ldi	r28, 0x00	; 0
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
 4b4:	04 c0       	rjmp	.+8      	; 0x4be <HC595_init+0x4e>
		{
				HC595_send_byte(0);
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 8e 03 	call	0x71c	; 0x71c <HC595_send_byte>
		PORTC&=  ~(1<<data_pin);	//initial state
		PORTC&=  ~(1<<latch_pin);	//initial state
		PORTC&=  ~(1<<clk_pin);		//initial state
		
		int init_cnt=0;
		for(init_cnt=0;init_cnt<3;init_cnt++)
 4bc:	21 96       	adiw	r28, 0x01	; 1
 4be:	c3 30       	cpi	r28, 0x03	; 3
 4c0:	d1 05       	cpc	r29, r1
 4c2:	cc f3       	brlt	.-14     	; 0x4b6 <HC595_init+0x46>
		{
				HC595_send_byte(0);
		}
		LATCH_HIGH;
 4c4:	88 b1       	in	r24, 0x08	; 8
 4c6:	84 60       	ori	r24, 0x04	; 4
 4c8:	88 b9       	out	0x08, r24	; 8
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	8a 95       	dec	r24
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <HC595_init+0x5c>
		_delay_loop_1(5);
		LATCH_LOW;
 4d0:	88 b1       	in	r24, 0x08	; 8
 4d2:	8b 7f       	andi	r24, 0xFB	; 251
 4d4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d6:	86 e6       	ldi	r24, 0x66	; 102
 4d8:	9e e0       	ldi	r25, 0x0E	; 14
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <HC595_init+0x6a>
 4de:	00 00       	nop
		_delay_ms(1);
		ENABLE;
 4e0:	88 b1       	in	r24, 0x08	; 8
 4e2:	8d 7f       	andi	r24, 0xFD	; 253
 4e4:	88 b9       	out	0x08, r24	; 8
		DATA_LOW;
 4e6:	88 b1       	in	r24, 0x08	; 8
 4e8:	8e 7f       	andi	r24, 0xFE	; 254
 4ea:	88 b9       	out	0x08, r24	; 8
		LATCH_LOW;
 4ec:	88 b1       	in	r24, 0x08	; 8
 4ee:	8b 7f       	andi	r24, 0xFB	; 251
 4f0:	88 b9       	out	0x08, r24	; 8
		CLK_LOW;
 4f2:	88 b1       	in	r24, 0x08	; 8
 4f4:	87 7f       	andi	r24, 0xF7	; 247
 4f6:	88 b9       	out	0x08, r24	; 8
 4f8:	86 e6       	ldi	r24, 0x66	; 102
 4fa:	9e e0       	ldi	r25, 0x0E	; 14
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <HC595_init+0x8c>
 500:	00 00       	nop
		_delay_ms(1);
}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

Disassembly of section .text.HC595_latch:

000007fa <HC595_latch>:

void HC595_latch()
{
  LATCH_HIGH;
 7fa:	88 b1       	in	r24, 0x08	; 8
 7fc:	84 60       	ori	r24, 0x04	; 4
 7fe:	88 b9       	out	0x08, r24	; 8
 800:	85 e0       	ldi	r24, 0x05	; 5
 802:	8a 95       	dec	r24
 804:	f1 f7       	brne	.-4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	_delay_loop_1(5);
	LATCH_LOW;
 806:	88 b1       	in	r24, 0x08	; 8
 808:	8b 7f       	andi	r24, 0xFB	; 251
 80a:	88 b9       	out	0x08, r24	; 8
 80c:	08 95       	ret

Disassembly of section .text.LED_SHOW:

00000856 <LED_SHOW>:
}

void LED_SHOW()
{
  HC595_latch();
 856:	0e 94 fd 03 	call	0x7fa	; 0x7fa <HC595_latch>
 85a:	08 95       	ret

Disassembly of section .text.LED_SETTING:

0000085c <LED_SETTING>:
}
void LED_SETTING(uint8_t data)
{
  HC595_send_byte(data);
 85c:	0e 94 8e 03 	call	0x71c	; 0x71c <HC595_send_byte>
 860:	08 95       	ret

Disassembly of section .text.LED_BAR_SETUP:

0000064e <LED_BAR_SETUP>:
}

void LED_BAR_SETUP(uint8_t red, uint8_t green)
{
  for(int i=0;i<12;i++)
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	1c c0       	rjmp	.+56     	; 0x68c <LED_BAR_SETUP+0x3e>
  {
      LED_BAR_ARRAY[i][0]=(i<red);
 654:	48 2f       	mov	r20, r24
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	24 17       	cp	r18, r20
 65c:	35 07       	cpc	r19, r21
 65e:	0c f0       	brlt	.+2      	; 0x662 <LED_BAR_SETUP+0x14>
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	f9 01       	movw	r30, r18
 664:	ee 0f       	add	r30, r30
 666:	ff 1f       	adc	r31, r31
 668:	e0 50       	subi	r30, 0x00	; 0
 66a:	ff 4f       	sbci	r31, 0xFF	; 255
 66c:	90 83       	st	Z, r25
      LED_BAR_ARRAY[i][1]=(i<green);
 66e:	46 2f       	mov	r20, r22
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	24 17       	cp	r18, r20
 676:	35 07       	cpc	r19, r21
 678:	0c f0       	brlt	.+2      	; 0x67c <LED_BAR_SETUP+0x2e>
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	f9 01       	movw	r30, r18
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	e0 50       	subi	r30, 0x00	; 0
 684:	ff 4f       	sbci	r31, 0xFF	; 255
 686:	91 83       	std	Z+1, r25	; 0x01
  HC595_send_byte(data);
}

void LED_BAR_SETUP(uint8_t red, uint8_t green)
{
  for(int i=0;i<12;i++)
 688:	2f 5f       	subi	r18, 0xFF	; 255
 68a:	3f 4f       	sbci	r19, 0xFF	; 255
 68c:	2c 30       	cpi	r18, 0x0C	; 12
 68e:	31 05       	cpc	r19, r1
 690:	0c f3       	brlt	.-62     	; 0x654 <LED_BAR_SETUP+0x6>
  {
      LED_BAR_ARRAY[i][0]=(i<red);
      LED_BAR_ARRAY[i][1]=(i<green);
  }
}
 692:	08 95       	ret

Disassembly of section .text.CMD:

000000e6 <CMD>:
}

void CMD()
{
  if(UCSR0A & (1<<RXC0))
  e6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ea:	88 23       	and	r24, r24
  ec:	0c f0       	brlt	.+2      	; 0xf0 <CMD+0xa>
  ee:	f1 c0       	rjmp	.+482    	; 0x2d2 <CMD+0x1ec>
    {
      unsigned char c = UDR0;
  f0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      switch(mode)
  f4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <mode>
  f8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <mode+0x1>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	99 f0       	breq	.+38     	; 0x128 <CMD+0x42>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	91 05       	cpc	r25, r1
 106:	e9 f0       	breq	.+58     	; 0x142 <CMD+0x5c>
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	09 f0       	breq	.+2      	; 0x10e <CMD+0x28>
 10c:	de c0       	rjmp	.+444    	; 0x2ca <CMD+0x1e4>
      {
        case header1:
          if(c==0xAA)
 10e:	2a 3a       	cpi	r18, 0xAA	; 170
 110:	31 f4       	brne	.+12     	; 0x11e <CMD+0x38>
          {
            mode++;
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <mode+0x1>
 118:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <mode>
 11c:	08 95       	ret
          }
          else
            mode=header1;
 11e:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode+0x1>
 122:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode>
 126:	08 95       	ret
        break;
        case header2:
          if(c==0x55)
 128:	25 35       	cpi	r18, 0x55	; 85
 12a:	31 f4       	brne	.+12     	; 0x138 <CMD+0x52>
            mode++;
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <mode+0x1>
 132:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <mode>
 136:	08 95       	ret
          else
            mode=header1;
 138:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode+0x1>
 13c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode>
 140:	08 95       	ret
        break;
        case cmd:
          if(c==0x00)
 142:	21 11       	cpse	r18, r1
 144:	07 c0       	rjmp	.+14     	; 0x154 <CMD+0x6e>
          {
            BOOT_DONE=0;
 146:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <BOOT_DONE>
            BOOT_LED_COLOR=GREEN;
 14a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <BOOT_LED_COLOR+0x1>
 14e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <BOOT_LED_COLOR>
 152:	b6 c0       	rjmp	.+364    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x01)
 154:	21 30       	cpi	r18, 0x01	; 1
 156:	49 f4       	brne	.+18     	; 0x16a <CMD+0x84>
          {
            BOOT_DONE=0;
 158:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <BOOT_DONE>
            BOOT_LED_COLOR=RED;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <BOOT_LED_COLOR+0x1>
 164:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <BOOT_LED_COLOR>
 168:	ab c0       	rjmp	.+342    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x02){
 16a:	22 30       	cpi	r18, 0x02	; 2
 16c:	49 f4       	brne	.+18     	; 0x180 <CMD+0x9a>
            BOOT_DONE=0;
 16e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <BOOT_DONE>
            BOOT_LED_COLOR=YELLOW;
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <BOOT_LED_COLOR+0x1>
 17a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <BOOT_LED_COLOR>
 17e:	a0 c0       	rjmp	.+320    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x10){
 180:	20 31       	cpi	r18, 0x10	; 16
 182:	29 f4       	brne	.+10     	; 0x18e <CMD+0xa8>
            LED_BAR_SETUP(0,0);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 18c:	99 c0       	rjmp	.+306    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x11){
 18e:	21 31       	cpi	r18, 0x11	; 17
 190:	29 f4       	brne	.+10     	; 0x19c <CMD+0xb6>
            LED_BAR_SETUP(0,1);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 19a:	92 c0       	rjmp	.+292    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x12){
 19c:	22 31       	cpi	r18, 0x12	; 18
 19e:	29 f4       	brne	.+10     	; 0x1aa <CMD+0xc4>
            LED_BAR_SETUP(0,2);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 1a8:	8b c0       	rjmp	.+278    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x13){
 1aa:	23 31       	cpi	r18, 0x13	; 19
 1ac:	29 f4       	brne	.+10     	; 0x1b8 <CMD+0xd2>
            LED_BAR_SETUP(0,3);
 1ae:	63 e0       	ldi	r22, 0x03	; 3
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 1b6:	84 c0       	rjmp	.+264    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x14){
 1b8:	24 31       	cpi	r18, 0x14	; 20
 1ba:	29 f4       	brne	.+10     	; 0x1c6 <CMD+0xe0>
            LED_BAR_SETUP(0,4);
 1bc:	64 e0       	ldi	r22, 0x04	; 4
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 1c4:	7d c0       	rjmp	.+250    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x15){
 1c6:	25 31       	cpi	r18, 0x15	; 21
 1c8:	29 f4       	brne	.+10     	; 0x1d4 <CMD+0xee>
            LED_BAR_SETUP(0,5);
 1ca:	65 e0       	ldi	r22, 0x05	; 5
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 1d2:	76 c0       	rjmp	.+236    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x16){
 1d4:	26 31       	cpi	r18, 0x16	; 22
 1d6:	29 f4       	brne	.+10     	; 0x1e2 <CMD+0xfc>
            LED_BAR_SETUP(0,6);
 1d8:	66 e0       	ldi	r22, 0x06	; 6
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 1e0:	6f c0       	rjmp	.+222    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x17){
 1e2:	27 31       	cpi	r18, 0x17	; 23
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <CMD+0x10a>
            LED_BAR_SETUP(0,7);
 1e6:	67 e0       	ldi	r22, 0x07	; 7
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 1ee:	68 c0       	rjmp	.+208    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x18){
 1f0:	28 31       	cpi	r18, 0x18	; 24
 1f2:	29 f4       	brne	.+10     	; 0x1fe <CMD+0x118>
            LED_BAR_SETUP(0,8);
 1f4:	68 e0       	ldi	r22, 0x08	; 8
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 1fc:	61 c0       	rjmp	.+194    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x19){
 1fe:	29 31       	cpi	r18, 0x19	; 25
 200:	29 f4       	brne	.+10     	; 0x20c <CMD+0x126>
            LED_BAR_SETUP(0,9);
 202:	69 e0       	ldi	r22, 0x09	; 9
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 20a:	5a c0       	rjmp	.+180    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x1A){
 20c:	2a 31       	cpi	r18, 0x1A	; 26
 20e:	29 f4       	brne	.+10     	; 0x21a <CMD+0x134>
            LED_BAR_SETUP(0,10);
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 218:	53 c0       	rjmp	.+166    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x1B){
 21a:	2b 31       	cpi	r18, 0x1B	; 27
 21c:	29 f4       	brne	.+10     	; 0x228 <CMD+0x142>
            LED_BAR_SETUP(0,11);
 21e:	6b e0       	ldi	r22, 0x0B	; 11
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 226:	4c c0       	rjmp	.+152    	; 0x2c0 <CMD+0x1da>
          }else if(c==0x1C){
 228:	2c 31       	cpi	r18, 0x1C	; 28
 22a:	29 f4       	brne	.+10     	; 0x236 <CMD+0x150>
            LED_BAR_SETUP(0,12);
 22c:	6c e0       	ldi	r22, 0x0C	; 12
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 234:	45 c0       	rjmp	.+138    	; 0x2c0 <CMD+0x1da>
          }else if(c>=0x20 && c<=0x70){
 236:	80 ee       	ldi	r24, 0xE0	; 224
 238:	82 0f       	add	r24, r18
 23a:	81 35       	cpi	r24, 0x51	; 81
 23c:	a8 f4       	brcc	.+42     	; 0x268 <CMD+0x182>
            // FLASH PROCESS LED BAR
            PROCESS_DONE=0;
 23e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <PROCESS_DONE>
            //BAR_LED_COLOR=GREEN;
            PROCESS_TIME=(c-0x20)*10;
 242:	82 2f       	mov	r24, r18
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 97       	sbiw	r24, 0x20	; 32
 248:	9c 01       	movw	r18, r24
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	82 0f       	add	r24, r18
 25c:	93 1f       	adc	r25, r19
 25e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <PROCESS_TIME+0x1>
 262:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <PROCESS_TIME>
 266:	2c c0       	rjmp	.+88     	; 0x2c0 <CMD+0x1da>
          }else if(c==0x71){
 268:	21 37       	cpi	r18, 0x71	; 113
 26a:	29 f4       	brne	.+10     	; 0x276 <CMD+0x190>
            BAR_LED_COLOR=GREEN;
 26c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <BAR_LED_COLOR+0x1>
 270:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <BAR_LED_COLOR>
 274:	25 c0       	rjmp	.+74     	; 0x2c0 <CMD+0x1da>
          }else if(c==0x72){
 276:	22 37       	cpi	r18, 0x72	; 114
 278:	39 f4       	brne	.+14     	; 0x288 <CMD+0x1a2>
            BAR_LED_COLOR=RED;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <BAR_LED_COLOR+0x1>
 282:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <BAR_LED_COLOR>
 286:	1c c0       	rjmp	.+56     	; 0x2c0 <CMD+0x1da>
          }else if(c==0x73){
 288:	23 37       	cpi	r18, 0x73	; 115
 28a:	39 f4       	brne	.+14     	; 0x29a <CMD+0x1b4>
            BAR_LED_COLOR=YELLOW;
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <BAR_LED_COLOR+0x1>
 294:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <BAR_LED_COLOR>
 298:	13 c0       	rjmp	.+38     	; 0x2c0 <CMD+0x1da>
          }else if(c==0x74){
 29a:	24 37       	cpi	r18, 0x74	; 116
 29c:	19 f4       	brne	.+6      	; 0x2a4 <CMD+0x1be>
			ex_power_up();
 29e:	0e 94 1b 04 	call	0x836	; 0x836 <ex_power_up>
 2a2:	0e c0       	rjmp	.+28     	; 0x2c0 <CMD+0x1da>
          }else if(c==0x75){
 2a4:	25 37       	cpi	r18, 0x75	; 117
 2a6:	19 f4       	brne	.+6      	; 0x2ae <CMD+0x1c8>
			ex_power_down();
 2a8:	0e 94 1f 04 	call	0x83e	; 0x83e <ex_power_down>
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <CMD+0x1da>
          }else if(c==0x76){
 2ae:	26 37       	cpi	r18, 0x76	; 118
 2b0:	19 f4       	brne	.+6      	; 0x2b8 <CMD+0x1d2>
          button_led_on();
 2b2:	0e 94 23 04 	call	0x846	; 0x846 <button_led_on>
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <CMD+0x1da>
          }else if(c==0x77){
 2b8:	27 37       	cpi	r18, 0x77	; 119
 2ba:	11 f4       	brne	.+4      	; 0x2c0 <CMD+0x1da>
          button_led_off();
 2bc:	0e 94 27 04 	call	0x84e	; 0x84e <button_led_off>
          }
          mode=header1;
 2c0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode+0x1>
 2c4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode>
        break;
 2c8:	08 95       	ret
        default:
          mode=header1;
 2ca:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <mode+0x1>
 2ce:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mode>
 2d2:	08 95       	ret

Disassembly of section .text.led_bar_init:

000007c4 <led_bar_init>:


void led_bar_init()
{
  DDRB |=  (1<<ABCD_pin); // PB0 GPIO WRITE MODE
 7c4:	84 b1       	in	r24, 0x04	; 4
 7c6:	81 60       	ori	r24, 0x01	; 1
 7c8:	84 b9       	out	0x04, r24	; 4
  DDRB |=  (1<<EFGH_pin); // PB1 GPIO WRITE MODE
 7ca:	84 b1       	in	r24, 0x04	; 4
 7cc:	82 60       	ori	r24, 0x02	; 2
 7ce:	84 b9       	out	0x04, r24	; 4
  DDRB |=  (1<<IJKL_pin); // PB2 GPIO WRITE MODE
 7d0:	84 b1       	in	r24, 0x04	; 4
 7d2:	84 60       	ori	r24, 0x04	; 4
 7d4:	84 b9       	out	0x04, r24	; 4
  HC595_init();
 7d6:	0e 94 38 02 	call	0x470	; 0x470 <HC595_init>
  LED_BAR_SETUP(0,0);
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
 7e2:	08 95       	ret

Disassembly of section .text.LED_SELECT:

000006d8 <LED_SELECT>:
}

void LED_SELECT(uint8_t SEL_NUM)
{
  if(SEL_NUM==0)
 6d8:	81 11       	cpse	r24, r1
 6da:	09 c0       	rjmp	.+18     	; 0x6ee <LED_SELECT+0x16>
  {
    ABCD_ON;
 6dc:	95 b1       	in	r25, 0x05	; 5
 6de:	91 60       	ori	r25, 0x01	; 1
 6e0:	95 b9       	out	0x05, r25	; 5
    EFGH_OFF;
 6e2:	95 b1       	in	r25, 0x05	; 5
 6e4:	9d 7f       	andi	r25, 0xFD	; 253
 6e6:	95 b9       	out	0x05, r25	; 5
    IJKL_OFF;
 6e8:	95 b1       	in	r25, 0x05	; 5
 6ea:	9b 7f       	andi	r25, 0xFB	; 251
 6ec:	95 b9       	out	0x05, r25	; 5
  }
  if(SEL_NUM==1)
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	49 f4       	brne	.+18     	; 0x704 <LED_SELECT+0x2c>
  {
    ABCD_OFF;
 6f2:	95 b1       	in	r25, 0x05	; 5
 6f4:	9e 7f       	andi	r25, 0xFE	; 254
 6f6:	95 b9       	out	0x05, r25	; 5
    EFGH_ON;
 6f8:	95 b1       	in	r25, 0x05	; 5
 6fa:	92 60       	ori	r25, 0x02	; 2
 6fc:	95 b9       	out	0x05, r25	; 5
    IJKL_OFF;
 6fe:	95 b1       	in	r25, 0x05	; 5
 700:	9b 7f       	andi	r25, 0xFB	; 251
 702:	95 b9       	out	0x05, r25	; 5
  }
  if(SEL_NUM==2)
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	49 f4       	brne	.+18     	; 0x71a <LED_SELECT+0x42>
  {
    ABCD_OFF;
 708:	85 b1       	in	r24, 0x05	; 5
 70a:	8e 7f       	andi	r24, 0xFE	; 254
 70c:	85 b9       	out	0x05, r24	; 5
    EFGH_OFF;
 70e:	85 b1       	in	r24, 0x05	; 5
 710:	8d 7f       	andi	r24, 0xFD	; 253
 712:	85 b9       	out	0x05, r24	; 5
    IJKL_ON;
 714:	85 b1       	in	r24, 0x05	; 5
 716:	84 60       	ori	r24, 0x04	; 4
 718:	85 b9       	out	0x05, r24	; 5
 71a:	08 95       	ret

Disassembly of section .text.LED_BAR_RUN:

000003d0 <LED_BAR_RUN>:
  }
}

void LED_BAR_RUN()
{
  cycle_wait++;
 3d0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <cycle_wait>
 3d4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <cycle_wait+0x1>
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <cycle_wait+0x1>
 3de:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <cycle_wait>
  if(cycle_wait>300)
 3e2:	8d 32       	cpi	r24, 0x2D	; 45
 3e4:	91 40       	sbci	r25, 0x01	; 1
 3e6:	3c f0       	brlt	.+14     	; 0x3f6 <LED_BAR_RUN+0x26>
  {
    cycle_wait=0;
 3e8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <cycle_wait+0x1>
 3ec:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <cycle_wait>
    LED_CHANGE=1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <LED_CHANGE>
  }

  if(LED_CHANGE)
 3f6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <LED_CHANGE>
 3fa:	88 23       	and	r24, r24
 3fc:	c1 f1       	breq	.+112    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
  { 
    
    position_select++;
 3fe:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <position_select>
 402:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <position_select+0x1>
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <position_select+0x1>
 40c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <position_select>
    if(position_select>2)
 410:	03 97       	sbiw	r24, 0x03	; 3
 412:	24 f0       	brlt	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
    position_select=0;
 414:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <position_select+0x1>
 418:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <position_select>

    LED_CHANGE=0;
 41c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <LED_CHANGE>
    uint8_t LED_DATA=0;
     for(int i=0;i<4;i++)
 420:	20 e0       	ldi	r18, 0x00	; 0
 422:	30 e0       	ldi	r19, 0x00	; 0
    position_select++;
    if(position_select>2)
    position_select=0;

    LED_CHANGE=0;
    uint8_t LED_DATA=0;
 424:	80 e0       	ldi	r24, 0x00	; 0
     for(int i=0;i<4;i++)
 426:	18 c0       	rjmp	.+48     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     {
      LED_DATA=LED_DATA<<1;
 428:	88 0f       	add	r24, r24
      LED_DATA+=LED_BAR_ARRAY[position_select*4+i][RED];
 42a:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <position_select>
 42e:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <position_select+0x1>
 432:	ee 0f       	add	r30, r30
 434:	ff 1f       	adc	r31, r31
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	e2 0f       	add	r30, r18
 43c:	f3 1f       	adc	r31, r19
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	e0 50       	subi	r30, 0x00	; 0
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	91 81       	ldd	r25, Z+1	; 0x01
 448:	89 0f       	add	r24, r25
      LED_DATA+=LED_BAR_ARRAY[position_select*4+i][GREEN]*16;
 44a:	90 81       	ld	r25, Z
 44c:	40 e1       	ldi	r20, 0x10	; 16
 44e:	94 9f       	mul	r25, r20
 450:	80 0d       	add	r24, r0
 452:	11 24       	eor	r1, r1
    if(position_select>2)
    position_select=0;

    LED_CHANGE=0;
    uint8_t LED_DATA=0;
     for(int i=0;i<4;i++)
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	3f 4f       	sbci	r19, 0xFF	; 255
 458:	24 30       	cpi	r18, 0x04	; 4
 45a:	31 05       	cpc	r19, r1
 45c:	2c f3       	brlt	.-54     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
      LED_DATA=LED_DATA<<1;
      LED_DATA+=LED_BAR_ARRAY[position_select*4+i][RED];
      LED_DATA+=LED_BAR_ARRAY[position_select*4+i][GREEN]*16;
     }

    LED_SETTING(LED_DATA);
 45e:	0e 94 2e 04 	call	0x85c	; 0x85c <LED_SETTING>
    LED_SELECT(position_select);
 462:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <position_select>
 466:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LED_SELECT>
    LED_SHOW();
 46a:	0e 94 2b 04 	call	0x856	; 0x856 <LED_SHOW>
 46e:	08 95       	ret

Disassembly of section .text.BOOT_LED_LOGIC:

00000508 <BOOT_LED_LOGIC>:
int BOOT_LED_COLOR=GREEN;
int boot_cycle_wait=0;
int boot_logic_cnt=0;
uint8_t BOOT_DONE=0;
void BOOT_LED_LOGIC()
{
 508:	cf 93       	push	r28
  if(BOOT_DONE==0)
 50a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <BOOT_DONE>
 50e:	81 11       	cpse	r24, r1
 510:	32 c0       	rjmp	.+100    	; 0x576 <BOOT_LED_LOGIC+0x6e>
  {
    boot_logic_cnt++;
 512:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <boot_logic_cnt>
 516:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <boot_logic_cnt+0x1>
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <boot_logic_cnt+0x1>
 520:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <boot_logic_cnt>
    if(boot_logic_cnt>=13)
 524:	0d 97       	sbiw	r24, 0x0d	; 13
 526:	3c f0       	brlt	.+14     	; 0x536 <BOOT_LED_LOGIC+0x2e>
    {
      boot_logic_cnt=0;
 528:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <boot_logic_cnt+0x1>
 52c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <boot_logic_cnt>
      BOOT_DONE=1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <BOOT_DONE>
    }

    uint8_t led_level = boot_logic_cnt;
 536:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <boot_logic_cnt>
    if(BOOT_LED_COLOR==GREEN)
 53a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <BOOT_LED_COLOR>
 53e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <BOOT_LED_COLOR+0x1>
 542:	89 2b       	or	r24, r25
 544:	21 f4       	brne	.+8      	; 0x54e <BOOT_LED_LOGIC+0x46>
      LED_BAR_SETUP(0,led_level);
 546:	6c 2f       	mov	r22, r28
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
    if(BOOT_LED_COLOR==RED)
 54e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <BOOT_LED_COLOR>
 552:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <BOOT_LED_COLOR+0x1>
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	21 f4       	brne	.+8      	; 0x562 <BOOT_LED_LOGIC+0x5a>
      LED_BAR_SETUP(led_level,0);
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	8c 2f       	mov	r24, r28
 55e:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
    if(BOOT_LED_COLOR==YELLOW)
 562:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <BOOT_LED_COLOR>
 566:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <BOOT_LED_COLOR+0x1>
 56a:	02 97       	sbiw	r24, 0x02	; 2
 56c:	21 f4       	brne	.+8      	; 0x576 <BOOT_LED_LOGIC+0x6e>
      LED_BAR_SETUP(led_level,led_level);
 56e:	6c 2f       	mov	r22, r28
 570:	8c 2f       	mov	r24, r28
 572:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>

  }
}
 576:	cf 91       	pop	r28
 578:	08 95       	ret

Disassembly of section .text.BOOT_LED:

0000077e <BOOT_LED>:
void BOOT_LED()
{
  boot_cycle_wait++;
 77e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <boot_cycle_wait>
 782:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <boot_cycle_wait+0x1>
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <boot_cycle_wait+0x1>
 78c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <boot_cycle_wait>
  if(boot_cycle_wait>30000)
 790:	81 33       	cpi	r24, 0x31	; 49
 792:	95 47       	sbci	r25, 0x75	; 117
 794:	34 f0       	brlt	.+12     	; 0x7a2 <BOOT_LED+0x24>
  {
    boot_cycle_wait=0;
 796:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <boot_cycle_wait+0x1>
 79a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <boot_cycle_wait>
    BOOT_LED_LOGIC();
 79e:	0e 94 84 02 	call	0x508	; 0x508 <BOOT_LED_LOGIC>
 7a2:	08 95       	ret

Disassembly of section .text.PROCESS_LED_LOGIC:

000005e8 <PROCESS_LED_LOGIC>:
int process_bar_cycle_wait=0;
int process_bar_tims_second=0;
uint8_t Process_level=0;
uint8_t PROCESS_DONE=1;
void PROCESS_LED_LOGIC()
{
 5e8:	cf 93       	push	r28
  if(PROCESS_DONE==0)
 5ea:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <PROCESS_DONE>
 5ee:	81 11       	cpse	r24, r1
 5f0:	2c c0       	rjmp	.+88     	; 0x64a <PROCESS_LED_LOGIC+0x62>
  {
    Process_level++;
 5f2:	c0 91 33 01 	lds	r28, 0x0133	; 0x800133 <Process_level>
 5f6:	cf 5f       	subi	r28, 0xFF	; 255
 5f8:	c0 93 33 01 	sts	0x0133, r28	; 0x800133 <Process_level>

    uint8_t led_level = Process_level;
    if(BAR_LED_COLOR==GREEN)
 5fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <BAR_LED_COLOR>
 600:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <BAR_LED_COLOR+0x1>
 604:	89 2b       	or	r24, r25
 606:	21 f4       	brne	.+8      	; 0x610 <PROCESS_LED_LOGIC+0x28>
      LED_BAR_SETUP(0,led_level);
 608:	6c 2f       	mov	r22, r28
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
    if(BAR_LED_COLOR==RED)
 610:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <BAR_LED_COLOR>
 614:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <BAR_LED_COLOR+0x1>
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	21 f4       	brne	.+8      	; 0x624 <PROCESS_LED_LOGIC+0x3c>
      LED_BAR_SETUP(led_level,0);
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	8c 2f       	mov	r24, r28
 620:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>
    if(BAR_LED_COLOR==YELLOW)
 624:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <BAR_LED_COLOR>
 628:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <BAR_LED_COLOR+0x1>
 62c:	02 97       	sbiw	r24, 0x02	; 2
 62e:	21 f4       	brne	.+8      	; 0x638 <PROCESS_LED_LOGIC+0x50>
      LED_BAR_SETUP(led_level,led_level);
 630:	6c 2f       	mov	r22, r28
 632:	8c 2f       	mov	r24, r28
 634:	0e 94 27 03 	call	0x64e	; 0x64e <LED_BAR_SETUP>

    if(Process_level>=12)
 638:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Process_level>
 63c:	8c 30       	cpi	r24, 0x0C	; 12
 63e:	28 f0       	brcs	.+10     	; 0x64a <PROCESS_LED_LOGIC+0x62>
    {
      Process_level=0;
 640:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Process_level>
      PROCESS_DONE=1;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <PROCESS_DONE>
    }

  }
}
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

Disassembly of section .text.PROCESS_BAR_LED:

0000057a <PROCESS_BAR_LED>:

void PROCESS_BAR_LED()
{
  process_bar_cycle_wait++;
 57a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <process_bar_cycle_wait>
 57e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <process_bar_cycle_wait+0x1>
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <process_bar_cycle_wait+0x1>
 588:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <process_bar_cycle_wait>
  if(process_bar_cycle_wait>one_second_cnt)
 58c:	8d 34       	cpi	r24, 0x4D	; 77
 58e:	9d 41       	sbci	r25, 0x1D	; 29
 590:	6c f0       	brlt	.+26     	; 0x5ac <PROCESS_BAR_LED+0x32>
  {
    process_bar_cycle_wait=0;
 592:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <process_bar_cycle_wait+0x1>
 596:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <process_bar_cycle_wait>
    process_bar_tims_second++;
 59a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <process_bar_tims_second>
 59e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <process_bar_tims_second+0x1>
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <process_bar_tims_second+0x1>
 5a8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <process_bar_tims_second>
  }
  if(PROCESS_TIME<=10)
 5ac:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <PROCESS_TIME>
 5b0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <PROCESS_TIME+0x1>
 5b4:	0b 97       	sbiw	r24, 0x0b	; 11
 5b6:	34 f4       	brge	.+12     	; 0x5c4 <PROCESS_BAR_LED+0x4a>
    PROCESS_TIME=10;
 5b8:	8a e0       	ldi	r24, 0x0A	; 10
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <PROCESS_TIME+0x1>
 5c0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <PROCESS_TIME>
  if(process_bar_tims_second>PROCESS_TIME)
 5c4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <process_bar_tims_second>
 5c8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <process_bar_tims_second+0x1>
 5cc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <PROCESS_TIME>
 5d0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <PROCESS_TIME+0x1>
 5d4:	82 17       	cp	r24, r18
 5d6:	93 07       	cpc	r25, r19
 5d8:	34 f4       	brge	.+12     	; 0x5e6 <PROCESS_BAR_LED+0x6c>
  {
    process_bar_tims_second=0;
 5da:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <process_bar_tims_second+0x1>
 5de:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <process_bar_tims_second>
    PROCESS_LED_LOGIC();
 5e2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <PROCESS_LED_LOGIC>
 5e6:	08 95       	ret

Disassembly of section .text.main:

00000754 <main>:
#include "led_motion.h"
#include "process_bar.h"

int main(void)
{
	  ex_power_init();
 754:	0e 94 17 04 	call	0x82e	; 0x82e <ex_power_init>
	  ex_power_down();
 758:	0e 94 1f 04 	call	0x83e	; 0x83e <ex_power_down>
	  uart_init();
 75c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <uart_init>
	  led_bar_init();
 760:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <led_bar_init>
	  button_init();
 764:	0e 94 07 04 	call	0x80e	; 0x80e <button_init>
	  
    while(1)
    {
       PROCESS_BAR_LED();
 768:	0e 94 bd 02 	call	0x57a	; 0x57a <PROCESS_BAR_LED>
       BOOT_LED();
 76c:	0e 94 bf 03 	call	0x77e	; 0x77e <BOOT_LED>
       LED_BAR_RUN();
 770:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_BAR_RUN>
       CMD();
 774:	0e 94 73 00 	call	0xe6	; 0xe6 <__data_load_end>
       button_read();
 778:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <button_read>
 77c:	f5 cf       	rjmp	.-22     	; 0x768 <main+0x14>

Disassembly of section .text.__dummy_fini:

0000086a <_fini>:
 86a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000086c <__funcs_on_exit>:
 86c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000086e <__simulator_exit>:
 86e:	08 95       	ret

Disassembly of section .text.exit:

000007e4 <exit>:
 7e4:	ec 01       	movw	r28, r24
 7e6:	0e 94 36 04 	call	0x86c	; 0x86c <__funcs_on_exit>
 7ea:	0e 94 35 04 	call	0x86a	; 0x86a <_fini>
 7ee:	ce 01       	movw	r24, r28
 7f0:	0e 94 37 04 	call	0x86e	; 0x86e <__simulator_exit>
 7f4:	ce 01       	movw	r24, r28
 7f6:	0e 94 33 04 	call	0x866	; 0x866 <_Exit>

Disassembly of section .text._Exit:

00000866 <_Exit>:
 866:	0e 94 71 00 	call	0xe2	; 0xe2 <_exit>
